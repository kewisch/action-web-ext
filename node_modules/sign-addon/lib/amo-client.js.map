{"version":3,"file":"amo-client.js","names":["defaultFs","url","path","deepcopy","defaultJwt","defaultRequest","oneLine","PseudoProgress","formatResponse","response","overrides","options","_stringifyToJson","JSON","stringify","maxLength","prettyResponse","e","length","substring","toString","getUrlBasename","absUrl","urlPath","basename","parse","parts","split","Client","constructor","apiKey","apiSecret","apiUrlPrefix","apiJwtExpiresIn","debugLogging","statusCheckInterval","statusCheckTimeout","logger","console","downloadDir","process","cwd","fs","request","proxyServer","requestConfig","progressBar","disableProgressBar","_progressBar","preamble","_fs","_request","sign","guid","version","channel","xpiPath","formData","upload","createReadStream","addonUrl","httpMethod","put","encodeURIComponent","debug","post","warn","bind","throwOnBadResponse","then","httpResponse","body","acceptableStatuses","receivedError","error","indexOf","statusCode","Promise","resolve","success","id","downloadedFiles","errorCode","errorDetails","Error","absoluteURL","headers","waitForSignedAddon","statusUrl","_clearTimeout","clearTimeout","_setAbortTimeout","setTimeout","_setStatusCheckTimeout","reject","abortTimeout","finish","checkSignedStatus","status","get","canBeAutoSigned","automated_signing","signedAndReady","valid","active","reviewed","files","requiresManualReview","log","result","downloadSignedFiles","err","checkValidationStatus","processed","validation_url","setPreamble","animate","signedFiles","createWriteStream","stdout","allDownloads","dataExpected","dataReceived","showProgress","progress","amount","toFixed","padding","Array","join","write","download","fileUrl","fileName","out","configureRequest","method","followRedirect","on","contentLength","parseInt","chunk","pipe","foundUnsignedFiles","forEach","file","signed","push","download_url","all","replace","requestConf","patch","delete","urlString","match","config","jwt","String","proxy","authToken","iss","algorithm","expiresIn","timeout","Authorization","Accept","toLowerCase","toUpperCase","requestMethod","responseBody","redact","obj","hdr","Object","keys","key","args","prototype","map","call","arguments","val","newVal"],"sources":["../src/amo-client.js"],"sourcesContent":["/* eslint max-classes-per-file: 0 */\nimport defaultFs from 'fs';\nimport url from 'url';\nimport path from 'path';\n\nimport deepcopy from 'deepcopy';\nimport defaultJwt from 'jsonwebtoken';\nimport defaultRequest from 'request';\nimport { oneLine } from 'common-tags';\n\nimport PseudoProgress from './PseudoProgress.js';\n\n/** @typedef {import(\"request\").OptionsWithUrl} RequestConfig */\n\n/** @typedef {import(\"request\").Response} Response */\n\n/**\n * @typedef {\"listed\" | \"unlisted\"} ReleaseChannel\n */\n\n/**\n * See: https://addons-server.readthedocs.io/en/latest/topics/api/signing.html#checking-the-status-of-your-upload\n *\n * @typedef {{\n *   guid: string,\n *   active: boolean,\n *   automated_signing: boolean,\n *   files: File[],\n *   passed_review: boolean,\n *   pk: string,\n *   processed: boolean,\n *   reviewed: boolean,\n *   url: string,\n *   valid: boolean,\n *   validation_results: object,\n *   validation_url: string,\n *   version: string,\n * }} SigningStatus\n */\n\n/**\n * @typedef {object} ClientParams\n * @property {string} apiKey - API key string from the Developer Hub\n * @property {string} apiSecret - API secret string from the Developer Hub\n * @property {string} apiUrlPrefix - API URL prefix, including any leading paths\n * @property {number=} apiJwtExpiresIn - Number of seconds until the JWT token for the API request expires. This must match the expiration time that the API server accepts\n * @property {boolean=} debugLogging - When true, log more information\n * @property {number=} statusCheckInterval - A period in millesconds between checks when waiting on add-on status\n * @property {number=} statusCheckTimeout -  A length in millesconds to give up if the add-on hasn't been validated and signed\n * @property {typeof console=} logger\n * @property {string=} downloadDir - Absolute path to save downloaded files to. The working directory will be used by default\n * @property {typeof defaultFs=} fs\n * @property {typeof defaultRequest=} request\n * @property {string=} proxyServer - Optional proxy server to use for all requests, such as \"http://yourproxy:6000\"\n * @property {RequestConfig=} requestConfig - Optional configuration object to pass to request(). Not all parameters are guaranteed to be applied\n * @property {PseudoProgress=} progressBar\n * @property {boolean=} disableProgressBar - When true, disables progress bar\n */\n\n/**\n * @typedef {object} SignParams\n * @property {string=} guid - optional add-on GUID (ID in install.rdf)\n * @property {string} version - add-on version string\n * @property {ReleaseChannel=} channel - release channel (listed or unlisted)\n * @property {string} xpiPath - path to xpi file\n */\n\n/**\n * @typedef {(\"SERVER_FAILURE\"|\"ADDON_NOT_AUTO_SIGNED\"|\"VALIDATION_FAILED\")} SignErrorCode\n */\n\n/**\n * @typedef {{\n *   success: boolean,\n *   id: string | null,\n *   downloadedFiles: string[] | null,\n *   errorCode: SignErrorCode | null,\n *   errorDetails: string | null\n * }} SignResult\n */\n\n/**\n * Returns a nicely formatted HTTP response.\n * This makes the response suitable for logging.\n *\n * @param {string|object} response - either the response's body or an object representing a JSON API response.\n * @param {object=} overrides\n * @returns {string}\n */\nexport function formatResponse(response, overrides = {}) {\n  const options = {\n    _stringifyToJson: JSON.stringify,\n    maxLength: 500,\n    ...overrides,\n  };\n  let prettyResponse = response;\n  const stringify = options._stringifyToJson || JSON.stringify;\n  if (typeof prettyResponse === 'object') {\n    try {\n      prettyResponse = stringify(prettyResponse);\n    } catch (e) {\n      //\n    }\n  }\n  if (typeof prettyResponse === 'string') {\n    if (prettyResponse.length > options.maxLength) {\n      prettyResponse = `${prettyResponse.substring(0, options.maxLength)}...`;\n    }\n  }\n  return prettyResponse.toString();\n}\n\n/**\n * Returns the basename of a URL, suitable for saving to disk.\n *\n * @param {string} absUrl\n * @returns {string}\n */\nexport function getUrlBasename(absUrl) {\n  // TODO: `url.parse()` might return `undefined` so we need to check that first.\n  // @ts-ignore\n  const urlPath = path.basename(url.parse(absUrl).path);\n  const parts = urlPath.split('?');\n\n  return parts[0];\n}\n/**\n * addons.mozilla.org API client.\n */\nexport class Client {\n  /**\n   * Type for `this.request()`.\n   *\n   * @typedef {object} RequestMethodOptions\n   * @property {boolean=} throwOnBadResponse - if true, an error will be thrown when response status is not 2xx\n   */\n\n  /**\n   * Type for `this.request()`.\n   *\n   * @typedef {Promise<[Response, SigningStatus]>} RequestMethodReturnValue\n   */\n\n  /**\n   * See: https://addons-server.readthedocs.io/en/latest/topics/api/signing.html#get--api-v4-addons-(string-guid)-versions-(string-version)-[uploads-(string-upload-pk)-]\n   *\n   * @typedef {{ signed: boolean, download_url: string, hash: string }} File\n   */\n\n  /**\n   * @param {ClientParams} params\n   */\n  constructor({\n    apiKey,\n    apiSecret,\n    apiUrlPrefix,\n    // TODO: put this back to something sane after we\n    // address the file upload issue on AMO:\n    // https://github.com/mozilla/addons-server/issues/3688\n    apiJwtExpiresIn = 60 * 5, // 5 minutes\n    debugLogging = false,\n    statusCheckInterval = 1000,\n    statusCheckTimeout = 900000, // 15 minutes.\n    logger = console,\n    downloadDir = process.cwd(),\n    fs = defaultFs,\n    request = defaultRequest,\n    proxyServer,\n    requestConfig,\n    progressBar,\n    disableProgressBar = false,\n  }) {\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.apiUrlPrefix = apiUrlPrefix; // default set in CLI options.\n    this.apiJwtExpiresIn = apiJwtExpiresIn;\n    this.statusCheckInterval = statusCheckInterval;\n    this.statusCheckTimeout = statusCheckTimeout;\n    this.debugLogging = debugLogging;\n    this.logger = logger;\n    this.downloadDir = downloadDir;\n    this.proxyServer = proxyServer;\n    this.requestConfig = requestConfig || {};\n\n    // Set up external dependencies, allowing for overrides.\n    if (!disableProgressBar) {\n      this._progressBar =\n        progressBar ||\n        new PseudoProgress({\n          preamble: 'Validating add-on',\n        });\n    }\n    this._fs = fs;\n    this._request = request;\n  }\n\n  /**\n   * Sign a new version of your add-on at addons.mozilla.org.\n   *\n   * @param {SignParams} signParams\n   * @returns {Promise<SignResult>}\n   */\n  sign({ guid, version, channel, xpiPath }) {\n    /**\n     * @type {{\n     *   upload: defaultFs.ReadStream;\n     *   channel?: string;\n     *   version?: string;\n     * }}\n     */\n    const formData = {\n      upload: this._fs.createReadStream(xpiPath),\n    };\n    let addonUrl = '/addons/';\n    let httpMethod = this.put;\n    if (guid) {\n      // PUT to a specific URL for this add-on + version.\n      addonUrl += `${encodeURIComponent(guid)}/versions/${encodeURIComponent(\n        version,\n      )}/`;\n      if (channel) {\n        formData.channel = channel;\n      }\n    } else {\n      // POST to a generic URL to create a new add-on.\n      this.debug('Signing add-on without an ID');\n      httpMethod = this.post;\n      formData.version = version;\n      if (channel) {\n        this.logger.warn(\n          'Specifying a channel for a new add-on is unsupported. ' +\n            'New add-ons are always in the unlisted channel.',\n        );\n      }\n    }\n\n    return httpMethod\n      .bind(this)(\n        {\n          url: addonUrl,\n          formData,\n        },\n        {\n          throwOnBadResponse: false,\n        },\n      )\n      .then(\n        /**\n         * @param {[\n         *   Response,\n         *   { error?: string, headers?: {[name: string]: string}, url: string }\n         * ]} requestValue\n         * @returns {Promise<SignResult>} result\n         */\n        ([httpResponse, body]) => {\n          const response = body;\n\n          const acceptableStatuses = [200, 201, 202];\n          const receivedError = !!response.error;\n          if (\n            acceptableStatuses.indexOf(httpResponse.statusCode) === -1 ||\n            receivedError\n          ) {\n            if (response.error) {\n              this.logger.error(\n                `Server response: ${response.error}`,\n                `(status: ${httpResponse.statusCode})`,\n              );\n              return Promise.resolve({\n                success: false,\n                id: null,\n                downloadedFiles: null,\n                errorCode: 'SERVER_FAILURE',\n                errorDetails: response.error,\n              });\n            }\n\n            throw new Error(\n              `Received bad response from the server while requesting ${this.absoluteURL(\n                addonUrl,\n              )}\\n\\n` +\n                `status: ${httpResponse.statusCode}\\n` +\n                `response: ${formatResponse(response)}\\n` +\n                `headers: ${JSON.stringify(httpResponse.headers || {})}\\n`,\n            );\n          }\n\n          return this.waitForSignedAddon(response.url);\n        },\n      );\n  }\n\n  /**\n   * Poll a status URL, waiting for the queued add-on to be signed.\n   *\n   * @typedef {object} WaitForSignedAddonParams\n   * @property {typeof clearTimeout=} _clearTimeout\n   * @property {typeof setTimeout=} _setAbortTimeout\n   * @property {typeof setTimeout=} _setStatusCheckTimeout\n   *\n   * @param {string} statusUrl - URL to GET for add-on status\n   * @param {WaitForSignedAddonParams} options\n   * @returns {Promise<SignResult>}\n   */\n  waitForSignedAddon(\n    statusUrl,\n    {\n      _clearTimeout = clearTimeout,\n      _setAbortTimeout = setTimeout,\n      _setStatusCheckTimeout = setTimeout,\n    } = {},\n  ) {\n    return new Promise((resolve, reject) => {\n      /** @type {NodeJS.Timer} */\n      let statusCheckTimeout;\n\n      /** @type {NodeJS.Timer} */\n      const abortTimeout = _setAbortTimeout(() => {\n        this._progressBar?.finish();\n        _clearTimeout(statusCheckTimeout);\n\n        reject(\n          new Error(oneLine`Signing is still pending, you will receive an email\n            once there is an update on the status of your submission. If you\n            don’t see the email after 24 hours, please check your Spam\n            folder.`),\n        );\n      }, this.statusCheckTimeout);\n\n      // This function polls the API until the add-on is signed or requires\n      // manual review. If the add-on is signed, we download the signed files.\n      //\n      // This function resolves the main `Promise` in both cases.\n      const checkSignedStatus = async () => {\n        try {\n          const [\n            // eslint-disable-next-line no-unused-vars\n            httpResponse,\n            status,\n          ] = await this.get({ url: statusUrl });\n          const canBeAutoSigned = status.automated_signing;\n          // The add-on passed validation and all files have been created. There\n          // are many checks for this state because the data will be updated\n          // incrementally by the API server.\n          const signedAndReady =\n            status.valid &&\n            status.active &&\n            status.reviewed &&\n            status.files &&\n            status.files.length > 0;\n          // The add-on is valid but requires a manual review before it can be\n          // signed.\n          const requiresManualReview = status.valid && !canBeAutoSigned;\n\n          if (signedAndReady || requiresManualReview) {\n            this._progressBar?.finish();\n            _clearTimeout(abortTimeout);\n\n            if (requiresManualReview) {\n              this.logger.log(oneLine`Your add-on has been submitted for review.\n              It passed validation but could not be automatically signed\n              because this is a listed add-on.`);\n\n              resolve({\n                success: false,\n                id: null,\n                downloadedFiles: null,\n                errorCode: 'ADDON_NOT_AUTO_SIGNED',\n                errorDetails: null,\n              });\n              return;\n            }\n\n            if (signedAndReady) {\n              // TODO: show some validation warnings if there are any. We should\n              // show things like \"missing update URL in manifest\"\n              const result = await this.downloadSignedFiles(status.files);\n              resolve({ ...result, id: status.guid });\n            }\n          } else {\n            // The add-on has not been fully processed yet.\n            statusCheckTimeout = _setStatusCheckTimeout(\n              checkSignedStatus,\n              this.statusCheckInterval,\n            );\n          }\n        } catch (err) {\n          _clearTimeout(abortTimeout);\n          reject(err);\n        }\n      };\n\n      // This function polls the API until the add-on is processed/validated.\n      // This function only rejects when the add-on is not valid. When the\n      // add-on is valid, we call `checkSignedStatus()`.\n      const checkValidationStatus = async () => {\n        try {\n          const [\n            // eslint-disable-next-line no-unused-vars\n            httpResponse,\n            status,\n          ] = await this.get({ url: statusUrl });\n          if (status.processed) {\n            this._progressBar?.finish();\n            this.logger.log('Validation results:', status.validation_url);\n            // Update pseudo progress preamble for the signing step.\n            this._progressBar?.setPreamble('Signing add-on');\n            this._progressBar?.animate();\n\n            if (status.valid) {\n              checkSignedStatus();\n            } else {\n              this.logger.log(\n                'Your add-on failed validation and could not be signed',\n              );\n\n              _clearTimeout(abortTimeout);\n\n              resolve({\n                success: false,\n                id: null,\n                downloadedFiles: null,\n                errorCode: 'VALIDATION_FAILED',\n                errorDetails: status.validation_url,\n              });\n            }\n          } else {\n            // Validation is not completed yet.\n            statusCheckTimeout = _setStatusCheckTimeout(\n              checkValidationStatus,\n              this.statusCheckInterval,\n            );\n          }\n        } catch (err) {\n          _clearTimeout(abortTimeout);\n          reject(err);\n        }\n      };\n\n      // Goooo\n      this._progressBar?.animate();\n      checkValidationStatus();\n    });\n  }\n\n  /**\n   * Download the signed files.\n   *\n   * @param {File[]} signedFiles - Array of file objects returned from the API.\n   * @param {{\n   *   createWriteStream?: typeof defaultFs.createWriteStream,\n   *   request?: typeof defaultRequest,\n   *   stdout?: typeof process.stdout\n   * }} options\n   * @returns {Promise<SignResult>}\n   */\n  async downloadSignedFiles(\n    signedFiles,\n    {\n      createWriteStream = defaultFs.createWriteStream,\n      request = this._request,\n      stdout = process.stdout,\n    } = {},\n  ) {\n    /** @type {Promise<string>[]} */\n    const allDownloads = [];\n    /** @type {null | number} */\n    let dataExpected = null;\n    let dataReceived = 0;\n\n    function showProgress() {\n      let progress = '...';\n      if (dataExpected !== null) {\n        const amount = ((dataReceived / dataExpected) * 100).toFixed();\n        // Pad the percentage amount so that the line length is consistent.\n        // This should do something like '  0%', ' 25%', '100%'\n        let padding = '';\n        try {\n          padding = Array(4 - amount.length).join(' ');\n        } catch (e) {\n          // Ignore Invalid array length and such.\n        }\n        progress = `${padding + amount}% `;\n      }\n      stdout.write(`\\rDownloading signed files: ${progress}`);\n    }\n\n    /**\n     * @param {string} fileUrl\n     * @returns {Promise<string>}\n     */\n    const download = (fileUrl) => {\n      return new Promise((resolve, reject) => {\n        // The API will give us a signed file named in a sane way.\n        const fileName = path.join(this.downloadDir, getUrlBasename(fileUrl));\n        const out = createWriteStream(fileName);\n\n        request(\n          this.configureRequest({\n            method: 'GET',\n            url: fileUrl,\n            followRedirect: true,\n          }),\n        )\n          .on('error', reject)\n          .on(\n            'response',\n            /**\n             * @param {Response} response\n             * @returns {void}\n             */\n            (response) => {\n              if (response.statusCode < 200 || response.statusCode >= 300) {\n                throw new Error(\n                  `Got a ${response.statusCode} response ` +\n                    `when downloading ${fileUrl}`,\n                );\n              }\n              const contentLength = response.headers['content-length'];\n              if (contentLength) {\n                if (dataExpected !== null) {\n                  dataExpected += parseInt(contentLength, 10);\n                } else {\n                  dataExpected = parseInt(contentLength, 10);\n                }\n              }\n            },\n          )\n          .on(\n            'data',\n            /**\n             * @param {string} chunk\n             * @returns {void}\n             */\n            (chunk) => {\n              dataReceived += chunk.length;\n              showProgress();\n            },\n          )\n          .pipe(out)\n          .on('error', reject);\n\n        out.on('finish', function () {\n          stdout.write('\\n'); // end the progress output\n          resolve(fileName);\n        });\n      });\n    };\n\n    let foundUnsignedFiles = false;\n    signedFiles.forEach((file) => {\n      if (file.signed) {\n        allDownloads.push(download(file.download_url));\n      } else {\n        this.debug('This file was not signed:', file);\n\n        foundUnsignedFiles = true;\n      }\n    });\n\n    let downloadedFiles;\n    if (allDownloads.length) {\n      if (foundUnsignedFiles) {\n        this.logger.log(oneLine`Some files were not signed. Re-run with\n        --verbose for details.`);\n      }\n\n      showProgress();\n\n      downloadedFiles = await Promise.all(allDownloads);\n    } else {\n      throw new Error(oneLine`The XPI was processed but no signed files were\n      found. Check your manifest and make sure it targets Firefox as an\n      application.`);\n    }\n\n    this.logger.log('Downloaded:');\n    downloadedFiles.forEach((fileName) => {\n      this.logger.log(`    ${fileName.replace(process.cwd(), '.')}`);\n    });\n\n    return {\n      success: true,\n      id: null,\n      downloadedFiles,\n      errorCode: null,\n      errorDetails: null,\n    };\n  }\n\n  /**\n   * Make a GET request.\n   *\n   * @param {RequestConfig} requestConf\n   * @param {RequestMethodOptions=} options\n   * @returns {RequestMethodReturnValue}\n   */\n  get(requestConf, options) {\n    return this.request('get', requestConf, options);\n  }\n\n  /**\n   * Make a POST request.\n   *\n   * @param {RequestConfig} requestConf\n   * @param {RequestMethodOptions=} options\n   * @returns {RequestMethodReturnValue}\n   */\n  post(requestConf, options) {\n    return this.request('post', requestConf, options);\n  }\n\n  /**\n   * Make a PUT request.\n   *\n   * @param {RequestConfig} requestConf\n   * @param {RequestMethodOptions=} options\n   * @returns {RequestMethodReturnValue}\n   */\n  put(requestConf, options) {\n    return this.request('put', requestConf, options);\n  }\n\n  /**\n   * Make a PATCH request.\n   *\n   * @param {RequestConfig} requestConf\n   * @param {RequestMethodOptions=} options\n   * @returns {RequestMethodReturnValue}\n   */\n  patch(requestConf, options) {\n    return this.request('patch', requestConf, options);\n  }\n\n  /**\n   * Make a DELETE request.\n   *\n   * @param {RequestConfig} requestConf\n   * @param {RequestMethodOptions=} options\n   * @returns {RequestMethodReturnValue}\n   */\n  delete(requestConf, options) {\n    return this.request('delete', requestConf, options);\n  }\n\n  /**\n   * Returns a URL that is guaranteed to be absolute.\n   *\n   * @param {string} urlString - a relative or already absolute URL\n   * @returns {string} url - an absolute URL, prefixed by the API prefix if necessary.\n   */\n  absoluteURL(urlString) {\n    if (!urlString.match(/^http/i)) {\n      return this.apiUrlPrefix + urlString;\n    }\n\n    return urlString;\n  }\n\n  /**\n   * Configures a request with defaults such as authentication headers.\n   *\n   * @param {RequestConfig} config - as accepted by the `request` module\n   * @param {{ jwt?: typeof defaultJwt}} options\n   * @returns {RequestConfig}\n   */\n  configureRequest(config, { jwt = defaultJwt } = {}) {\n    const requestConf = {\n      ...this.requestConfig,\n      ...config,\n    };\n\n    if (!requestConf.url) {\n      throw new Error('request URL was not specified');\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    requestConf.url = this.absoluteURL(String(requestConf.url));\n\n    if (this.proxyServer) {\n      // eslint-disable-next-line no-param-reassign\n      requestConf.proxy = this.proxyServer;\n    }\n\n    const authToken = jwt.sign({ iss: this.apiKey }, this.apiSecret, {\n      algorithm: 'HS256',\n      expiresIn: this.apiJwtExpiresIn,\n    });\n\n    // Make sure the request won't time out before the JWT expires.\n    // This may be useful for slow file uploads.\n    // eslint-disable-next-line no-param-reassign\n    requestConf.timeout = this.apiJwtExpiresIn * 1000 + 500;\n\n    // eslint-disable-next-line no-param-reassign\n    requestConf.headers = {\n      Authorization: `JWT ${authToken}`,\n      Accept: 'application/json',\n      ...requestConf.headers,\n    };\n\n    return requestConf;\n  }\n\n  /**\n   * Make any HTTP request to the addons.mozilla.org API.\n   *\n   * This includes the necessary authorization header.\n   *\n   * The returned promise will be resolved with an array of arguments that\n   * match the arguments sent to the callback as specified in the `request`\n   * module.\n   *\n   * @param {string} httpMethod - HTTP method name.\n   * @param {RequestConfig} config - options accepted by the `request` module\n   * @param {RequestMethodOptions} options\n   * @returns {RequestMethodReturnValue}\n   */\n  async request(httpMethod, config, { throwOnBadResponse = true } = {}) {\n    const method = httpMethod.toLowerCase();\n    const requestConf = this.configureRequest(config);\n\n    let [\n      // eslint-disable-next-line prefer-const\n      httpResponse,\n      body,\n    ] = await new Promise((resolve, reject) => {\n      this.debug(`[API] ${method.toUpperCase()} request:\\n`, requestConf);\n\n      // Get the caller, like request.get(), request.put() ...\n      // @ts-ignore\n      const requestMethod = this._request[method].bind(this._request);\n      // Wrap the request callback in a promise. Here is an example without\n      // promises:\n      //\n      // request.put(requestConf, function(err, httpResponse, body) {\n      //   // promise gets resolved here\n      // })\n      requestMethod(\n        /** @type RequestConfig */\n        requestConf,\n        /**\n         * @param {Error} error\n         * @param {Response} response\n         * @param {string} responseBody\n         */\n        (error, response, responseBody) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          resolve([response, responseBody]);\n        },\n      );\n    });\n\n    if (throwOnBadResponse) {\n      if (httpResponse.statusCode > 299 || httpResponse.statusCode < 200) {\n        throw new Error(\n          `Received bad response from ${this.absoluteURL(\n            String(requestConf.url),\n          )}; ` +\n            `status: ${httpResponse.statusCode}; ` +\n            `response: ${formatResponse(body)}`,\n        );\n      }\n    }\n\n    if (\n      httpResponse.headers &&\n      httpResponse.headers['content-type'] === 'application/json' &&\n      typeof body === 'string'\n    ) {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        this.logger.log('Failed to parse JSON response from server:', e);\n      }\n    }\n\n    this.debug(\n      `[API] ${method.toUpperCase()} response:\\n`,\n      `Status: ${httpResponse.statusCode}\\n`,\n      { headers: httpResponse.headers, response: body },\n    );\n\n    return [httpResponse, body];\n  }\n\n  /**\n   * Output some debugging info if this instance is configured for it.\n   */\n  debug() {\n    if (!this.debugLogging) {\n      return;\n    }\n\n    /**\n     * @param {{ headers: {[key: string]: string} } & {[prop: string]: any}} obj\n     */\n    function redact(obj) {\n      if (typeof obj !== 'object' || !obj) {\n        return obj;\n      }\n      if (obj.headers) {\n        ['Authorization', 'cookie', 'set-cookie'].forEach(function (hdr) {\n          if (obj.headers[hdr]) {\n            // eslint-disable-next-line no-param-reassign\n            obj.headers[hdr] = '<REDACTED>';\n          }\n        });\n      }\n\n      Object.keys(obj).forEach(function (key) {\n        // eslint-disable-next-line no-param-reassign\n        obj[key] = redact(obj[key]);\n      });\n\n      return obj;\n    }\n\n    // TODO: remove the use of `arguments`\n    // eslint-disable-next-line prefer-rest-params\n    const args = Array.prototype.map.call(arguments, function (val) {\n      let newVal = val;\n      if (typeof newVal === 'object') {\n        newVal = deepcopy(newVal);\n        newVal = redact(newVal);\n      }\n      return newVal;\n    });\n    this.logger.log('[sign-addon]', ...args);\n  }\n}\n"],"mappings":"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"}