{"version":3,"file":"index.js","names":["nodeFs","path","promisify","default","defaultFxRunner","FirefoxProfile","fs","fromEvent","isDirectory","isErrorWithCode","UsageError","WebExtError","getPrefs","defaultPrefGetter","getManifestId","findFreeTcpPort","defaultRemotePortFinder","createLogger","log","import","meta","url","defaultAsyncFsStat","stat","bind","defaultUserProfileCopier","copyFromUserProfile","defaultFirefoxEnv","XPCOM_DEBUG_BREAK","NS_TRACE_MALLOC_DISABLE_STACKS","run","profile","fxRunner","findRemotePort","firefoxBinary","binaryArgs","extensions","debug","remotePort","startsWith","flatpakAppId","substring","map","sourceDir","concat","results","process","env","firefox","binary","args","join","on","error","info","stderr","data","toString","trim","stdout","debuggerPort","DEFAULT_PROFILES_NAMES","isDefaultProfile","profilePathOrName","ProfileFinder","Finder","fsStat","includes","baseProfileDir","locateUserDirectory","profilesIniPath","finder","readProfiles","normalizedProfileDirPath","normalize","resolve","sep","profiles","Name","Default","profileFullPath","IsRelative","Path","configureProfile","app","customPrefs","prefs","Object","keys","forEach","pref","setPreference","length","customPrefsStr","JSON","stringify","custom","updatePreferences","Promise","defaultCreateProfileFinder","userDirectoryPath","FxProfile","getPath","profileName","hasProfileName","filter","profileDef","warn","useProfile","profilePath","configureThisProfile","isFirefoxDefaultProfile","createProfileFinder","isForbiddenProfile","destinationDirectory","getProfilePath","profileIsDirPath","createProfile","copyProfile","profileDirectory","copy","copyByName","dirExists","name","installExtension","asProxy","manifestData","extensionPath","asyncFsStat","extensionsDir","mkdir","id","isDir","destPath","writeStream","createWriteStream","write","end","readStream","createReadStream","pipe","all"],"sources":["../../src/firefox/index.js"],"sourcesContent":["/* @flow */\nimport nodeFs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\n\nimport {default as defaultFxRunner} from 'fx-runner';\nimport FirefoxProfile from 'firefox-profile';\nimport {fs} from 'mz';\nimport fromEvent from 'promise-toolbox/fromEvent';\n\nimport isDirectory from '../util/is-directory.js';\nimport {isErrorWithCode, UsageError, WebExtError} from '../errors.js';\nimport {getPrefs as defaultPrefGetter} from './preferences.js';\nimport {getManifestId} from '../util/manifest.js';\nimport {findFreeTcpPort as defaultRemotePortFinder} from './remote.js';\nimport {createLogger} from '../util/logger.js';\n// Import flow types\nimport type {\n  PreferencesAppName,\n  PreferencesGetterFn,\n  FirefoxPreferences,\n} from './preferences';\nimport type {ExtensionManifest} from '../util/manifest.js';\nimport type {Extension} from '../extension-runners/base.js';\n\n\nconst log = createLogger(import.meta.url);\n\nconst defaultAsyncFsStat: typeof fs.stat = fs.stat.bind(fs);\n\nconst defaultUserProfileCopier = FirefoxProfile.copyFromUserProfile;\n\nexport const defaultFirefoxEnv = {\n  XPCOM_DEBUG_BREAK: 'stack',\n  NS_TRACE_MALLOC_DISABLE_STACKS: '1',\n};\n\n// defaultRemotePortFinder types and implementation.\n\n\nexport type RemotePortFinderFn =\n  () => Promise<number>;\n\n// Declare the needed 'fx-runner' module flow types.\n\nexport type FirefoxRunnerParams = {|\n  binary: ?string,\n  profile?: string,\n  'new-instance'?: boolean,\n  'no-remote'?: boolean,\n  'foreground'?: boolean,\n  'listen': number,\n  'binary-args'?: Array<string> | string,\n  'binary-args-first'?: boolean,\n  'env'?: {\n    // This match the flowtype signature for process.env (and prevent flow\n    // from complaining about differences between their type signature)\n    [key: string]: string | void\n  },\n  'verbose'?: boolean,\n|};\n\nexport interface FirefoxProcess extends events$EventEmitter {\n  stderr: events$EventEmitter;\n  stdout: events$EventEmitter;\n  kill: Function;\n}\n\nexport type FirefoxRunnerResults = {|\n  process: FirefoxProcess,\n  binary: string,\n  args: Array<string>,\n|}\n\nexport type FirefoxRunnerFn =\n  (params: FirefoxRunnerParams) => Promise<FirefoxRunnerResults>;\n\n\nexport type FirefoxInfo = {|\n  firefox: FirefoxProcess,\n  debuggerPort: number,\n|}\n\n// Run command types and implementaion.\n\nexport type FirefoxRunOptions = {\n  fxRunner?: FirefoxRunnerFn,\n  findRemotePort?: RemotePortFinderFn,\n  firefoxBinary?: string,\n  binaryArgs?: Array<string>,\n  args?: Array<any>,\n  extensions: Array<Extension>,\n};\n\n/*\n * Runs Firefox with the given profile object and resolves a promise on exit.\n */\nexport async function run(\n  profile: FirefoxProfile,\n  {\n    fxRunner = defaultFxRunner,\n    findRemotePort = defaultRemotePortFinder,\n    firefoxBinary,\n    binaryArgs,\n    extensions,\n  }: FirefoxRunOptions = {}\n): Promise<FirefoxInfo> {\n\n  log.debug(`Running Firefox with profile at ${profile.path()}`);\n\n  const remotePort = await findRemotePort();\n\n  if (firefoxBinary && firefoxBinary.startsWith('flatpak:')) {\n    const flatpakAppId = firefoxBinary.substring(8);\n    log.debug(`Configuring Firefox with flatpak: appId=${flatpakAppId}`);\n\n    // This should be resolved by the fx-runner.\n    firefoxBinary = 'flatpak';\n    binaryArgs = [\n      'run',\n      `--filesystem=${profile.path()}`,\n      ...extensions.map(({ sourceDir }) => `--filesystem=${sourceDir}:ro`),\n      // We need to share the network namespace because we want to connect to\n      // Firefox with the remote protocol. There is no way to tell flatpak to\n      // only expose a port AFAIK.\n      '--share=network',\n      // Kill the entire sandbox when the launching process dies, which is what\n      // we want since exiting web-ext involves `kill` and the process executed\n      // here is `flatpak run`.\n      '--die-with-parent',\n      flatpakAppId,\n    ].concat(...(binaryArgs || []));\n  }\n\n  const results = await fxRunner({\n    // if this is falsey, fxRunner tries to find the default one.\n    'binary': firefoxBinary,\n    'binary-args': binaryArgs,\n    // For Flatpak we need to respect the order of the command arguments because\n    // we have arguments for Flapack (first) and then Firefox.\n    'binary-args-first': firefoxBinary === 'flatpak',\n    // This ensures a new instance of Firefox is created. It has nothing\n    // to do with the devtools remote debugger.\n    'no-remote': true,\n    'listen': remotePort,\n    'foreground': true,\n    'profile': profile.path(),\n    'env': {\n      ...process.env,\n      ...defaultFirefoxEnv,\n    },\n    'verbose': true,\n  });\n\n  const firefox = results.process;\n\n  log.debug(`Executing Firefox binary: ${results.binary}`);\n  log.debug(`Firefox args: ${results.args.join(' ')}`);\n\n  firefox.on('error', (error) => {\n    // TODO: show a nice error when it can't find Firefox.\n    // if (/No such file/.test(err) || err.code === 'ENOENT') {\n    log.error(`Firefox error: ${error}`);\n    throw error;\n  });\n\n  log.info(\n    'Use --verbose or open Tools > Web Developer > Browser Console ' +\n    'to see logging');\n\n  firefox.stderr.on('data', (data) => {\n    log.debug(`Firefox stderr: ${data.toString().trim()}`);\n  });\n\n  firefox.stdout.on('data', (data) => {\n    log.debug(`Firefox stdout: ${data.toString().trim()}`);\n  });\n\n  firefox.on('close', () => {\n    log.debug('Firefox closed');\n  });\n\n  return { firefox, debuggerPort: remotePort };\n}\n\n\n// isDefaultProfile types and implementation.\n\nconst DEFAULT_PROFILES_NAMES = [\n  'default',\n  'dev-edition-default',\n];\n\nexport type IsDefaultProfileFn = (\n  profilePathOrName: string,\n  ProfileFinder?: typeof FirefoxProfile.Finder,\n  fsStat?: typeof fs.stat,\n) => Promise<boolean>;\n\n/*\n * Tests if a profile is a default Firefox profile (both as a profile name or\n * profile path).\n *\n * Returns a promise that resolves to true if the profile is one of default Firefox profile.\n */\nexport async function isDefaultProfile(\n  profilePathOrName: string,\n  ProfileFinder?: typeof FirefoxProfile.Finder = FirefoxProfile.Finder,\n  fsStat?: typeof fs.stat = fs.stat,\n): Promise<boolean> {\n  if (DEFAULT_PROFILES_NAMES.includes(profilePathOrName)) {\n    return true;\n  }\n\n  const baseProfileDir = ProfileFinder.locateUserDirectory();\n  const profilesIniPath = path.join(baseProfileDir, 'profiles.ini');\n  try {\n    await fsStat(profilesIniPath);\n  } catch (error) {\n    if (isErrorWithCode('ENOENT', error)) {\n      log.debug(`profiles.ini not found: ${error}`);\n\n      // No profiles exist yet, default to false (the default profile name contains a\n      // random generated component).\n      return false;\n    }\n\n    // Re-throw any unexpected exception.\n    throw error;\n  }\n\n  // Check for profile dir path.\n  const finder = new ProfileFinder(baseProfileDir);\n  const readProfiles = promisify((...args) => finder.readProfiles(...args));\n\n  await readProfiles();\n\n  const normalizedProfileDirPath = path.normalize(\n    path.join(path.resolve(profilePathOrName), path.sep)\n  );\n\n  for (const profile of finder.profiles) {\n    // Check if the profile dir path or name is one of the default profiles\n    // defined in the profiles.ini file.\n    if (DEFAULT_PROFILES_NAMES.includes(profile.Name) ||\n        profile.Default === '1') {\n      let profileFullPath;\n\n      // Check for profile name.\n      if (profile.Name === profilePathOrName) {\n        return true;\n      }\n\n      // Check for profile path.\n      if (profile.IsRelative === '1') {\n        profileFullPath = path.join(baseProfileDir, profile.Path, path.sep);\n      } else {\n        profileFullPath = path.join(profile.Path, path.sep);\n      }\n\n      if (path.normalize(profileFullPath) === normalizedProfileDirPath) {\n        return true;\n      }\n    }\n  }\n\n  // Profile directory not found.\n  return false;\n}\n\n// configureProfile types and implementation.\n\nexport type ConfigureProfileOptions = {\n  app?: PreferencesAppName,\n  getPrefs?: PreferencesGetterFn,\n  customPrefs?: FirefoxPreferences,\n};\n\nexport type ConfigureProfileFn = (\n  profile: FirefoxProfile,\n  options?: ConfigureProfileOptions\n) => Promise<FirefoxProfile>;\n\n/*\n * Configures a profile with common preferences that are required to\n * activate extension development.\n *\n * Returns a promise that resolves with the original profile object.\n */\nexport function configureProfile(\n  profile: FirefoxProfile,\n  {\n    app = 'firefox',\n    getPrefs = defaultPrefGetter,\n    customPrefs = {},\n  }: ConfigureProfileOptions = {},\n): Promise<FirefoxProfile> {\n  // Set default preferences. Some of these are required for the add-on to\n  // operate, such as disabling signatures.\n  const prefs = getPrefs(app);\n  Object.keys(prefs).forEach((pref) => {\n    profile.setPreference(pref, prefs[pref]);\n  });\n  if (Object.keys(customPrefs).length > 0) {\n    const customPrefsStr = JSON.stringify(customPrefs, null, 2);\n    log.info(`Setting custom Firefox preferences: ${customPrefsStr}`);\n    Object.keys(customPrefs).forEach((custom) => {\n      profile.setPreference(custom, customPrefs[custom]);\n    });\n  }\n  profile.updatePreferences();\n  return Promise.resolve(profile);\n}\n\nexport type getProfileFn = (profileName: string) => Promise<string | void>;\n\nexport type CreateProfileFinderParams = {\n  userDirectoryPath?: string,\n  FxProfile?: typeof FirefoxProfile\n}\n\nexport function defaultCreateProfileFinder(\n  {\n    userDirectoryPath,\n    FxProfile = FirefoxProfile,\n  }: CreateProfileFinderParams = {}\n): getProfileFn {\n  const finder = new FxProfile.Finder(userDirectoryPath);\n  const readProfiles = promisify((...args) => finder.readProfiles(...args));\n  const getPath = promisify((...args) => finder.getPath(...args));\n  return async (profileName: string): Promise<string | void> => {\n    try {\n      await readProfiles();\n      const hasProfileName = finder.profiles.filter(\n        (profileDef) => profileDef.Name === profileName).length !== 0;\n      if (hasProfileName) {\n        return await getPath(profileName);\n      }\n    } catch (error) {\n      if (!isErrorWithCode('ENOENT', error)) {\n        throw error;\n      }\n      log.warn('Unable to find Firefox profiles.ini');\n    }\n  };\n}\n\n// useProfile types and implementation.\n\nexport type UseProfileParams = {\n  app?: PreferencesAppName,\n  configureThisProfile?: ConfigureProfileFn,\n  isFirefoxDefaultProfile?: IsDefaultProfileFn,\n  customPrefs?: FirefoxPreferences,\n  createProfileFinder?: typeof defaultCreateProfileFinder,\n};\n\n// Use the target path as a Firefox profile without cloning it\n\nexport async function useProfile(\n  profilePath: string,\n  {\n    app,\n    configureThisProfile = configureProfile,\n    isFirefoxDefaultProfile = isDefaultProfile,\n    customPrefs = {},\n    createProfileFinder = defaultCreateProfileFinder,\n  }: UseProfileParams = {},\n): Promise<FirefoxProfile> {\n  const isForbiddenProfile = await isFirefoxDefaultProfile(profilePath);\n  if (isForbiddenProfile) {\n    throw new UsageError(\n      'Cannot use --keep-profile-changes on a default profile' +\n      ` (\"${profilePath}\")` +\n      ' because web-ext will make it insecure and unsuitable for daily use.' +\n      '\\nSee https://github.com/mozilla/web-ext/issues/1005'\n    );\n  }\n\n  let destinationDirectory;\n  const getProfilePath = createProfileFinder();\n\n  const profileIsDirPath = await isDirectory(profilePath);\n  if (profileIsDirPath) {\n    log.debug(`Using profile directory \"${profilePath}\"`);\n    destinationDirectory = profilePath;\n  } else {\n    log.debug(`Assuming ${profilePath} is a named profile`);\n    destinationDirectory = await getProfilePath(profilePath);\n    if (!destinationDirectory) {\n      throw new UsageError(\n        `The request \"${profilePath}\" profile name ` +\n        'cannot be resolved to a profile path'\n      );\n    }\n  }\n\n  const profile = new FirefoxProfile({destinationDirectory});\n  return await configureThisProfile(profile, {app, customPrefs});\n}\n\n\n// createProfile types and implementation.\n\nexport type CreateProfileParams = {\n  app?: PreferencesAppName,\n  configureThisProfile?: ConfigureProfileFn,\n  customPrefs?: FirefoxPreferences,\n};\n\n/*\n * Creates a new temporary profile and resolves with the profile object.\n *\n * The profile will be deleted when the system process exits.\n */\nexport async function createProfile(\n  {\n    app,\n    configureThisProfile = configureProfile,\n    customPrefs = {},\n  }: CreateProfileParams = {},\n): Promise<FirefoxProfile> {\n  const profile = new FirefoxProfile();\n  return await configureThisProfile(profile, {app, customPrefs});\n}\n\n\n// copyProfile types and implementation.\n\nexport type CopyProfileOptions = {\n  app?: PreferencesAppName,\n  configureThisProfile?: ConfigureProfileFn,\n  copyFromUserProfile?: Function,\n  customPrefs?: FirefoxPreferences,\n};\n\n/*\n * Copies an existing Firefox profile and creates a new temporary profile.\n * The new profile will be configured with some preferences required to\n * activate extension development.\n *\n * It resolves with the new profile object.\n *\n * The temporary profile will be deleted when the system process exits.\n *\n * The existing profile can be specified as a directory path or a name of\n * one that exists in the current user's Firefox directory.\n */\nexport async function copyProfile(\n  profileDirectory: string,\n  {\n    app,\n    configureThisProfile = configureProfile,\n    copyFromUserProfile = defaultUserProfileCopier,\n    customPrefs = {},\n  }: CopyProfileOptions = {},\n): Promise<FirefoxProfile> {\n\n  const copy = promisify(FirefoxProfile.copy);\n  const copyByName = promisify(copyFromUserProfile);\n\n  try {\n    const dirExists = await isDirectory(profileDirectory);\n\n    let profile;\n\n    if (dirExists) {\n      log.debug(`Copying profile directory from \"${profileDirectory}\"`);\n      profile = await copy({profileDirectory});\n    } else {\n      log.debug(`Assuming ${profileDirectory} is a named profile`);\n      profile = await copyByName({name: profileDirectory});\n    }\n\n    return configureThisProfile(profile, {app, customPrefs});\n  } catch (error) {\n    throw new WebExtError(\n      `Could not copy Firefox profile from ${profileDirectory}: ${error}`);\n  }\n}\n\n\n// installExtension types and implementation.\n\nexport type InstallExtensionParams = {|\n  asProxy?: boolean,\n  manifestData: ExtensionManifest,\n  profile: FirefoxProfile,\n  extensionPath: string,\n  asyncFsStat?: typeof defaultAsyncFsStat,\n|};\n\n/*\n * Installs an extension into the given Firefox profile object.\n * Resolves when complete.\n *\n * The extension is copied into a special location and you need to turn\n * on some preferences to allow this. See extensions.autoDisableScopes in\n * ./preferences.js.\n *\n * When asProxy is true, a special proxy file will be installed. This is a\n * text file that contains the path to the extension source.\n */\nexport async function installExtension(\n  {\n    asProxy = false,\n    manifestData,\n    profile,\n    extensionPath,\n    asyncFsStat = defaultAsyncFsStat,\n  }: InstallExtensionParams): Promise<any> {\n  // This more or less follows\n  // https://github.com/saadtazi/firefox-profile-js/blob/master/lib/firefox_profile.js#L531\n  // (which is broken for web extensions).\n  // TODO: maybe uplift a patch that supports web extensions instead?\n\n  if (!profile.extensionsDir) {\n    throw new WebExtError('profile.extensionsDir was unexpectedly empty');\n  }\n\n  try {\n    await asyncFsStat(profile.extensionsDir);\n  } catch (error) {\n    if (isErrorWithCode('ENOENT', error)) {\n      log.debug(`Creating extensions directory: ${profile.extensionsDir}`);\n      await fs.mkdir(profile.extensionsDir);\n    } else {\n      throw error;\n    }\n  }\n\n  const id = getManifestId(manifestData);\n  if (!id) {\n    throw new UsageError(\n      'An explicit extension ID is required when installing to ' +\n      'a profile (applications.gecko.id not found in manifest.json)');\n  }\n\n  if (asProxy) {\n    log.debug(`Installing as an extension proxy; source: ${extensionPath}`);\n\n    const isDir = await isDirectory(extensionPath);\n    if (!isDir) {\n      throw new WebExtError(\n        'proxy install: extensionPath must be the extension source ' +\n        `directory; got: ${extensionPath}`);\n    }\n\n    // Write a special extension proxy file containing the source\n    // directory. See:\n    // https://developer.mozilla.org/en-US/Add-ons/Setting_up_extension_development_environment#Firefox_extension_proxy_file\n    const destPath = path.join(profile.extensionsDir, `${id}`);\n    const writeStream = nodeFs.createWriteStream(destPath);\n    writeStream.write(extensionPath);\n    writeStream.end();\n    return await fromEvent(writeStream, 'close');\n  } else {\n    // Write the XPI file to the profile.\n    const readStream = nodeFs.createReadStream(extensionPath);\n    const destPath = path.join(profile.extensionsDir, `${id}.xpi`);\n    const writeStream = nodeFs.createWriteStream(destPath);\n\n    log.debug(`Installing extension from ${extensionPath} to ${destPath}`);\n    readStream.pipe(writeStream);\n\n    return await Promise.all([\n      fromEvent(readStream, 'close'),\n      fromEvent(writeStream, 'close'),\n    ]);\n  }\n}\n"],"mappings":"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"}