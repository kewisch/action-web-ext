{"version":3,"file":"firefox-android.js","names":["path","readline","withTempDir","DefaultADBUtils","showDesktopNotification","defaultDesktopNotifications","MultiExtensionsReloadError","UsageError","WebExtError","defaultFirefoxApp","connectWithMaxRetries","defaultFirefoxConnector","findFreeTcpPort","createLogger","isTTY","setRawMode","log","import","meta","url","ignoredParams","profilePath","keepProfileChanges","browserConsole","preInstall","startUrl","args","DEFAULT_ADB_HOST","getIgnoredParamsWarningsMessage","optionName","FirefoxAndroidExtensionRunner","unixSocketDiscoveryRetryInterval","unixSocketDiscoveryMaxTime","constructor","params","cleanupCallbacks","Set","adbExtensionsPathBySourceDir","Map","reloadableExtensions","printIgnoredParamsWarnings","run","adbBin","adbHost","adbPort","ADBUtils","adbUtils","adbDevicesDiscoveryAndSelect","apkPackagesDiscoveryAndSelect","adbCheckRuntimePermissions","adbForceStopSelectedPackage","adbPrepareProfileDir","Promise","all","adbStartSelectedPackage","buildAndPushExtensions","adbDiscoveryAndForwardRDPUnixSocket","rdpInstallExtensions","getName","reloadAllExtensions","runnerName","reloadErrors","sourceDir","extensions","res","reloadExtensionBySourceDir","reloadError","Error","set","size","extensionSourceDir","addonId","get","buildAndPushExtension","remoteFirefox","reloadAddon","error","registerCleanup","fn","add","exit","selectedAdbDevice","selectedArtifactsDir","exiting","debug","clearArtifactsDir","getDeviceProfileDir","Object","keys","forEach","ignoredParam","warn","adbDevice","devices","discoverDevices","length","devicesMsg","map","dev","join","info","foundDevices","filter","device","JSON","stringify","firefoxApk","packages","discoverInstalledFirefoxAPKs","pkgsListMsg","pkgs","pkg","selectedFirefoxApk","filteredPackages","line","pkgsList","amForceStopAPK","androidVersion","getAndroidVersionNumber","Number","isNaN","requiredPermissions","ensureRequiredAPKRuntimePermissions","customPrefs","firefoxApp","adbRemoveOldArtifacts","profile","createProfile","app","foundOldArtifacts","detectOrRemoveOldArtifacts","getOrCreateArtifactsDir","deviceProfileDir","runShellCommand","pushFile","profileDir","firefoxApkComponent","startFirefoxAPK","buildSourceDir","tmpDir","extensionPath","extFileName","basename","adbExtensionPath","adbDiscoveryTimeout","stdin","process","handleCtrlC","str","key","ctrl","name","setUserAbortDiscovery","emitKeypressEvents","on","selectedRDPSocketFile","discoverRDPUnixSocket","maxDiscoveryTime","retryInterval","removeListener","tcpPort","forwardSocketSpec","startsWith","substr","setupForward","selectedTCPPort","firefoxClient","port","client","extension","installTemporaryAddon","then","installResult","addon","id"],"sources":["../../src/extension-runners/firefox-android.js"],"sourcesContent":["/* @flow */\n\n/**\n * This module provide an ExtensionRunner subclass that manage an extension executed\n * in a Firefox for Android instance.\n */\n\nimport path from 'path';\nimport readline from 'readline';\n\nimport {withTempDir} from '../util/temp-dir.js';\nimport DefaultADBUtils from '../util/adb.js';\nimport {\n  showDesktopNotification as defaultDesktopNotifications,\n} from '../util/desktop-notifier.js';\nimport {\n  MultiExtensionsReloadError,\n  UsageError,\n  WebExtError,\n} from '../errors.js';\nimport * as defaultFirefoxApp from '../firefox/index.js';\nimport {\n  connectWithMaxRetries as defaultFirefoxConnector,\n  findFreeTcpPort,\n} from '../firefox/remote.js';\nimport {createLogger} from '../util/logger.js';\nimport {isTTY, setRawMode} from '../util/stdin.js';\nimport type {\n  ExtensionRunnerParams,\n  ExtensionRunnerReloadResult,\n} from './base';\nimport type {\n  FirefoxPreferences,\n} from '../firefox/preferences';\nimport type {\n  FirefoxRDPResponseAddon,\n  RemoteFirefox,\n} from '../firefox/remote';\nimport type {\n  ExtensionBuildResult,\n} from '../cmd/build';\n\nconst log = createLogger(import.meta.url);\n\nconst ignoredParams = {\n  profilePath: '--profile-path',\n  keepProfileChanges: '--keep-profile-changes',\n  browserConsole: '--browser-console',\n  preInstall: '--pre-install',\n  startUrl: '--start-url',\n  args: '--args',\n};\n\n// Default adbHost to 127.0.0.1 to prevent issues with nodejs 17\n// (because if not specified adbkit may default to ipv6 while\n// adb may still only be listening on the ipv4 address),\n// see https://github.com/mozilla/web-ext/issues/2337.\nconst DEFAULT_ADB_HOST = '127.0.0.1';\n\nconst getIgnoredParamsWarningsMessage = (optionName) => {\n  return `The Firefox for Android target does not support ${optionName}`;\n};\n\nexport type FirefoxAndroidExtensionRunnerParams = {|\n  ...ExtensionRunnerParams,\n\n  // Firefox specific.\n  customPrefs?: FirefoxPreferences,\n\n  // Not supported (currently ignored with logged warning).\n  preInstall?: boolean,\n  browserConsole?: boolean,\n\n  // Firefox android injected dependencies.\n  adbBin?: string,\n  adbHost?: string,\n  adbPort?: string,\n  adbDevice?: string,\n  adbDiscoveryTimeout?: number,\n  adbRemoveOldArtifacts?: boolean,\n  firefoxApk?: string,\n  firefoxApkComponent?: string,\n\n  // Injected Dependencies.\n  firefoxApp: typeof defaultFirefoxApp,\n  firefoxClient: typeof defaultFirefoxConnector,\n  ADBUtils?: typeof DefaultADBUtils,\n  buildSourceDir: (string, string) => Promise<ExtensionBuildResult>,\n  desktopNotifications: typeof defaultDesktopNotifications,\n  stdin?: stream$Readable,\n|};\n\n/**\n * Implements an IExtensionRunner which manages a Firefox for Android instance.\n */\nexport class FirefoxAndroidExtensionRunner {\n  // Wait 3s before the next unix socket discovery loop.\n  static unixSocketDiscoveryRetryInterval: number = 3 * 1000;\n  // Wait for at most 3 minutes before giving up.\n  static unixSocketDiscoveryMaxTime: number = 3 * 60 * 1000;\n\n  params: FirefoxAndroidExtensionRunnerParams;\n  adbUtils: DefaultADBUtils;\n  exiting: boolean;\n  selectedAdbDevice: string;\n  selectedFirefoxApk: string;\n  selectedArtifactsDir: string;\n  selectedRDPSocketFile: string;\n  selectedTCPPort: number;\n  cleanupCallbacks: Set<Function>;\n  adbExtensionsPathBySourceDir: Map<string, string>;\n  reloadableExtensions: Map<string, string>;\n  remoteFirefox: RemoteFirefox;\n\n  constructor(params: FirefoxAndroidExtensionRunnerParams) {\n    this.params = params;\n    this.cleanupCallbacks = new Set();\n    this.adbExtensionsPathBySourceDir = new Map();\n    this.reloadableExtensions = new Map();\n\n    // Print warning for not currently supported options (e.g. preInstall,\n    // cloned profiles, browser console).\n    this.printIgnoredParamsWarnings();\n  }\n\n  async run(): Promise<void> {\n    const {\n      adbBin,\n      adbHost = DEFAULT_ADB_HOST,\n      adbPort,\n      ADBUtils = DefaultADBUtils,\n    } = this.params;\n\n    this.adbUtils = new ADBUtils({\n      adbBin, adbHost, adbPort,\n    });\n\n    await this.adbDevicesDiscoveryAndSelect();\n    await this.apkPackagesDiscoveryAndSelect();\n    await this.adbCheckRuntimePermissions();\n    await this.adbForceStopSelectedPackage();\n\n    // Create profile prefs (with enabled remote RDP server), prepare the\n    // artifacts and temporary directory on the selected device, and\n    // push the profile preferences to the remote profile dir.\n    await this.adbPrepareProfileDir();\n\n    // NOTE: running Firefox for Android on the Android Emulator can be\n    // pretty slow, we can run the following 3 steps in parallel to speed up\n    // it a bit.\n    await Promise.all([\n      // Start Firefox for Android instance if not started yet.\n      // (Fennec would run in an temporary profile and so it is explicitly\n      // stopped, Fenix runs on its usual profile and so it may be already\n      // running).\n      this.adbStartSelectedPackage(),\n\n      // Build and push to devices all the extension xpis\n      // and keep track of the xpi built and uploaded by extension sourceDir.\n      this.buildAndPushExtensions(),\n\n      // Wait for RDP unix socket file created and\n      // Create an ADB forward connection on a free tcp port\n      this.adbDiscoveryAndForwardRDPUnixSocket(),\n    ]);\n\n    // Connect to RDP socket on the local tcp server, install all the pushed extension\n    // and keep track of the built and installed extension by extension sourceDir.\n    await this.rdpInstallExtensions();\n  }\n\n  // Method exported from the IExtensionRunner interface.\n\n  /**\n   * Returns the runner name.\n   */\n  getName(): string {\n    return 'Firefox Android';\n  }\n\n  /**\n   * Reloads all the extensions, collect any reload error and resolves to\n   * an array composed by a single ExtensionRunnerReloadResult object.\n   */\n  async reloadAllExtensions(): Promise<Array<ExtensionRunnerReloadResult>> {\n    const runnerName = this.getName();\n    const reloadErrors = new Map();\n\n    for (const {sourceDir} of this.params.extensions) {\n      const [res] = await this.reloadExtensionBySourceDir(sourceDir);\n      if (res.reloadError instanceof Error) {\n        reloadErrors.set(sourceDir, res.reloadError);\n      }\n    }\n\n    if (reloadErrors.size > 0) {\n      return [{\n        runnerName,\n        reloadError: new MultiExtensionsReloadError(reloadErrors),\n      }];\n    }\n\n    return [{runnerName}];\n  }\n\n  /**\n   * Reloads a single extension, collect any reload error and resolves to\n   * an array composed by a single ExtensionRunnerReloadResult object.\n   */\n  async reloadExtensionBySourceDir(\n    extensionSourceDir: string\n  ): Promise<Array<ExtensionRunnerReloadResult>> {\n    const runnerName = this.getName();\n    const addonId = this.reloadableExtensions.get(extensionSourceDir);\n\n    if (!addonId) {\n      return [{\n        sourceDir: extensionSourceDir,\n        reloadError: new WebExtError(\n          'Extension not reloadable: ' +\n            `no addonId has been mapped to \"${extensionSourceDir}\"`\n        ),\n        runnerName,\n      }];\n    }\n\n    try {\n      await this.buildAndPushExtension(extensionSourceDir);\n      await this.remoteFirefox.reloadAddon(addonId);\n    } catch (error) {\n      return [{\n        sourceDir: extensionSourceDir,\n        reloadError: error,\n        runnerName,\n      }];\n    }\n\n    return [{runnerName, sourceDir: extensionSourceDir}];\n  }\n\n  /**\n   * Register a callback to be called when the runner has been exited\n   * (e.g. the Firefox instance exits or the user has requested web-ext\n   * to exit).\n   */\n  registerCleanup(fn: Function): void {\n    this.cleanupCallbacks.add(fn);\n  }\n\n  /**\n   * Exits the runner, by closing the managed Firefox instance.\n   */\n  async exit(): Promise<void> {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedArtifactsDir,\n    } = this;\n\n    this.exiting = true;\n\n    // If a Firefox for Android instance has been started,\n    // we should ensure that it has been stopped when we exit.\n    await this.adbForceStopSelectedPackage();\n\n    if (selectedArtifactsDir) {\n      log.debug('Cleaning up artifacts directory on the Android device...');\n      await adbUtils.clearArtifactsDir(selectedAdbDevice);\n    }\n\n    // Call all the registered cleanup callbacks.\n    for (const fn of this.cleanupCallbacks) {\n      try {\n        fn();\n      } catch (error) {\n        log.error(error);\n      }\n    }\n  }\n\n  // Private helper methods.\n\n  getDeviceProfileDir(): string {\n    return `${this.selectedArtifactsDir}/profile`;\n  }\n\n  printIgnoredParamsWarnings() {\n    Object.keys(ignoredParams).forEach((ignoredParam) => {\n      if (this.params[ignoredParam]) {\n        log.warn(\n          getIgnoredParamsWarningsMessage(ignoredParams[ignoredParam])\n        );\n      }\n    });\n  }\n\n  async adbDevicesDiscoveryAndSelect() {\n    const {adbUtils} = this;\n    const {adbDevice} = this.params;\n    let devices = [];\n\n    log.debug('Listing android devices');\n    devices = await adbUtils.discoverDevices();\n\n    if (devices.length === 0) {\n      throw new UsageError(\n        'No Android device found through ADB. ' +\n        'Make sure the device is connected and USB debugging is enabled.'\n      );\n    }\n\n    if (!adbDevice) {\n      const devicesMsg = devices.map((dev) => ` - ${dev}`).join('\\n');\n      log.info(`\\nAndroid devices found:\\n${devicesMsg}`);\n      throw new UsageError(\n        'Select an android device using --android-device=<name>');\n    }\n\n    const foundDevices = devices.filter((device) => {\n      return device === adbDevice;\n    });\n\n    if (foundDevices.length === 0) {\n      const devicesMsg = JSON.stringify(devices);\n      throw new UsageError(\n        `Android device ${adbDevice} was not found in list: ${devicesMsg}`);\n    }\n\n    this.selectedAdbDevice = foundDevices[0];\n    log.info(`Selected ADB device: ${this.selectedAdbDevice}`);\n  }\n\n  async apkPackagesDiscoveryAndSelect() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      params: {\n        firefoxApk,\n      },\n    } = this;\n    // Discovery and select a Firefox for Android version.\n    const packages = await adbUtils.discoverInstalledFirefoxAPKs(\n      selectedAdbDevice,\n      firefoxApk\n    );\n\n    if (packages.length === 0) {\n      throw new UsageError(\n        'No Firefox packages were found on the selected Android device');\n    }\n\n    const pkgsListMsg = (pkgs) => {\n      return pkgs.map((pkg) => ` - ${ pkg}`).join('\\n');\n    };\n\n    if (!firefoxApk) {\n      log.info(`\\nPackages found:\\n${pkgsListMsg(packages)}`);\n\n      if (packages.length > 1) {\n        throw new UsageError('Select one of the packages using --firefox-apk');\n      }\n\n      // If only one APK has been found, select it even if it has not been\n      // specified explicitly on the comment line.\n      this.selectedFirefoxApk = packages[0];\n      log.info(`Selected Firefox for Android APK: ${this.selectedFirefoxApk}`);\n      return;\n    }\n\n    const filteredPackages = packages.filter((line) => line === firefoxApk);\n\n    if (filteredPackages.length === 0) {\n      const pkgsList = pkgsListMsg(filteredPackages);\n      throw new UsageError(\n        `Package ${firefoxApk} was not found in list: ${pkgsList}`\n      );\n    }\n\n    this.selectedFirefoxApk = filteredPackages[0];\n    log.debug(`Selected Firefox for Android APK: ${this.selectedFirefoxApk}`);\n  }\n\n  async adbForceStopSelectedPackage() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedFirefoxApk,\n    } = this;\n\n    log.info(`Stopping existing instances of ${selectedFirefoxApk}...`);\n    await adbUtils.amForceStopAPK(selectedAdbDevice, selectedFirefoxApk);\n  }\n\n  async adbCheckRuntimePermissions() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedFirefoxApk,\n    } = this;\n\n    log.debug(`Discovering Android version for ${selectedAdbDevice}...`);\n\n    const androidVersion = await adbUtils.getAndroidVersionNumber(\n      selectedAdbDevice\n    );\n\n    if (typeof androidVersion !== 'number' || Number.isNaN(androidVersion)) {\n      throw new WebExtError(`Invalid Android version: ${androidVersion}`);\n    }\n\n    log.debug(`Detected Android version ${androidVersion}`);\n\n    if (androidVersion < 23) {\n      return;\n    }\n\n    log.debug('Checking read/write permissions needed for web-ext' +\n              `on ${selectedFirefoxApk}...`);\n\n    // Runtime permissions needed to Firefox to be able to access the\n    // xpi file uploaded to the android device or emulator.\n    const requiredPermissions = [\n      'android.permission.READ_EXTERNAL_STORAGE',\n    ];\n\n    await adbUtils.ensureRequiredAPKRuntimePermissions(\n      selectedAdbDevice, selectedFirefoxApk, requiredPermissions\n    );\n  }\n\n  async adbPrepareProfileDir() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedFirefoxApk,\n      params: {\n        customPrefs,\n        firefoxApp,\n        adbRemoveOldArtifacts,\n      },\n    } = this;\n    // Create the preferences file and the Fennec temporary profile.\n    log.debug(`Preparing a temporary profile for ${selectedFirefoxApk}...`);\n\n    const profile = await firefoxApp.createProfile({\n      app: 'fennec',\n      customPrefs,\n    });\n\n    // Check if there are any artifacts dirs from previous runs and\n    // automatically remove them if adbRemoteOldArtifacts is true.\n    const foundOldArtifacts = await adbUtils.detectOrRemoveOldArtifacts(\n      selectedAdbDevice, adbRemoveOldArtifacts\n    );\n\n    if (foundOldArtifacts) {\n      if (adbRemoveOldArtifacts) {\n        log.info('Old web-ext artifacts have been found and removed ' +\n          `from ${selectedAdbDevice} device`);\n      } else {\n        log.warn(\n          `Old artifacts directories have been found on ${selectedAdbDevice} ` +\n          'device. Use --adb-remove-old-artifacts to remove them automatically.'\n        );\n      }\n    }\n\n    // Choose a artifacts dir name for the assets pushed to the\n    // Android device.\n    this.selectedArtifactsDir = await adbUtils.getOrCreateArtifactsDir(\n      selectedAdbDevice\n    );\n\n    const deviceProfileDir = this.getDeviceProfileDir();\n\n    await adbUtils.runShellCommand(selectedAdbDevice, [\n      'mkdir', '-p', deviceProfileDir,\n    ]);\n    await adbUtils.pushFile(selectedAdbDevice,\n                            path.join(profile.profileDir, 'user.js'),\n                            `${deviceProfileDir}/user.js`);\n\n    log.debug(`Created temporary profile at ${deviceProfileDir}.`);\n  }\n\n  async adbStartSelectedPackage() {\n    const {\n      adbUtils,\n      selectedFirefoxApk,\n      selectedAdbDevice,\n      params: {\n        firefoxApkComponent,\n      },\n    } = this;\n\n    const deviceProfileDir = this.getDeviceProfileDir();\n\n    log.info(`Starting ${selectedFirefoxApk}...`);\n\n    log.debug(`Using profile ${deviceProfileDir} (ignored by Fenix)`);\n\n    await adbUtils.startFirefoxAPK(\n      selectedAdbDevice,\n      selectedFirefoxApk,\n      firefoxApkComponent,\n      deviceProfileDir,\n    );\n  }\n\n  async buildAndPushExtension(sourceDir: string) {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedArtifactsDir,\n      params: {\n        buildSourceDir,\n      },\n    } = this;\n\n    await withTempDir(async (tmpDir) => {\n      const {extensionPath} = await buildSourceDir(sourceDir, tmpDir.path());\n\n      const extFileName = path.basename(extensionPath, '.zip');\n\n      let adbExtensionPath = this.adbExtensionsPathBySourceDir.get(sourceDir);\n\n      if (!adbExtensionPath) {\n        adbExtensionPath = `${selectedArtifactsDir}/${extFileName}.xpi`;\n      }\n\n      log.debug(`Uploading ${extFileName} on the android device`);\n\n      await adbUtils.pushFile(\n        selectedAdbDevice, extensionPath, adbExtensionPath\n      );\n\n      log.debug(`Upload completed: ${adbExtensionPath}`);\n\n      this.adbExtensionsPathBySourceDir.set(sourceDir, adbExtensionPath);\n    });\n  }\n\n  async buildAndPushExtensions() {\n    for (const {sourceDir} of this.params.extensions) {\n      await this.buildAndPushExtension(sourceDir);\n    }\n  }\n\n  async adbDiscoveryAndForwardRDPUnixSocket() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedFirefoxApk,\n      params: {\n        adbDiscoveryTimeout,\n      },\n    } = this;\n\n    const stdin = this.params.stdin || process.stdin;\n\n    const {\n      unixSocketDiscoveryRetryInterval,\n    } = FirefoxAndroidExtensionRunner;\n\n    let {\n      unixSocketDiscoveryMaxTime,\n    } = FirefoxAndroidExtensionRunner;\n\n    if (typeof adbDiscoveryTimeout === 'number') {\n      unixSocketDiscoveryMaxTime = adbDiscoveryTimeout;\n    }\n\n    const handleCtrlC = (str, key) => {\n      if (key.ctrl && key.name === 'c') {\n        adbUtils.setUserAbortDiscovery(true);\n      }\n    };\n\n    // TODO: use noInput property to decide if we should\n    // disable direct keypress handling.\n    if (isTTY(stdin)) {\n      readline.emitKeypressEvents(stdin);\n      setRawMode(stdin, true);\n\n      stdin.on('keypress', handleCtrlC);\n    }\n\n    try {\n      // Got a debugger socket file to connect.\n      this.selectedRDPSocketFile = (\n        await adbUtils.discoverRDPUnixSocket(\n          selectedAdbDevice, selectedFirefoxApk, {\n            maxDiscoveryTime: unixSocketDiscoveryMaxTime,\n            retryInterval: unixSocketDiscoveryRetryInterval,\n          }\n        )\n      );\n    } finally {\n      if (isTTY(stdin)) {\n        stdin.removeListener('keypress', handleCtrlC);\n      }\n    }\n\n    log.debug(`RDP Socket File selected: ${this.selectedRDPSocketFile}`);\n\n    const tcpPort = await findFreeTcpPort();\n\n    // Log the choosen tcp port at info level (useful to the user to be able\n    // to connect the Firefox DevTools to the Firefox for Android instance).\n    log.info(`You can connect to this Android device on TCP port ${tcpPort}`);\n\n    const forwardSocketSpec = this.selectedRDPSocketFile.startsWith('@') ?\n      `localabstract:${this.selectedRDPSocketFile.substr(1)}`\n      : `localfilesystem:${this.selectedRDPSocketFile}`;\n\n    await adbUtils.setupForward(\n      selectedAdbDevice,\n      forwardSocketSpec,\n      `tcp:${tcpPort}`\n    );\n\n    this.selectedTCPPort = tcpPort;\n  }\n\n  async rdpInstallExtensions() {\n    const {\n      selectedTCPPort,\n      params: {\n        extensions,\n        firefoxClient,\n      },\n    } = this;\n\n    const remoteFirefox = this.remoteFirefox = await firefoxClient({\n      port: selectedTCPPort,\n    });\n\n    // Exit and cleanup the extension runner if the connection to the\n    // remote Firefox for Android instance has been closed.\n    remoteFirefox.client.on('end', () => {\n      if (!this.exiting) {\n        log.info('Exiting the device because Firefox for Android disconnected');\n        this.exit();\n      }\n    });\n\n    // Install all the temporary addons.\n    for (const extension of extensions) {\n      const {sourceDir} = extension;\n      const adbExtensionPath = this.adbExtensionsPathBySourceDir.get(\n        sourceDir\n      );\n\n      if (!adbExtensionPath) {\n        throw new WebExtError(\n          `ADB extension path for \"${sourceDir}\" was unexpectedly empty`\n        );\n      }\n\n      const addonId = await (\n        remoteFirefox.installTemporaryAddon(adbExtensionPath)\n          .then((installResult: FirefoxRDPResponseAddon) => {\n            return installResult.addon.id;\n          })\n      );\n\n      if (!addonId) {\n        throw new WebExtError(\n          'Received an empty addonId from ' +\n          `remoteFirefox.installTemporaryAddon(\"${adbExtensionPath}\")`\n        );\n      }\n\n      this.reloadableExtensions.set(extension.sourceDir, addonId);\n    }\n  }\n}\n"],"mappings":"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"}