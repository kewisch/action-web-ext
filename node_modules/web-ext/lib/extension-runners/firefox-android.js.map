{"version":3,"file":"firefox-android.js","names":["path","readline","withTempDir","DefaultADBUtils","MultiExtensionsReloadError","UsageError","WebExtError","findFreeTcpPort","createLogger","isTTY","setRawMode","log","import","meta","url","ignoredParams","profilePath","keepProfileChanges","browserConsole","preInstall","startUrl","args","DEFAULT_ADB_HOST","getIgnoredParamsWarningsMessage","optionName","FirefoxAndroidExtensionRunner","unixSocketDiscoveryRetryInterval","unixSocketDiscoveryMaxTime","params","adbUtils","exiting","selectedAdbDevice","selectedFirefoxApk","selectedArtifactsDir","selectedRDPSocketFile","selectedTCPPort","cleanupCallbacks","adbExtensionsPathBySourceDir","reloadableExtensions","remoteFirefox","constructor","Set","Map","printIgnoredParamsWarnings","run","adbBin","adbHost","adbPort","ADBUtils","adbDevicesDiscoveryAndSelect","apkPackagesDiscoveryAndSelect","adbForceStopSelectedPackage","adbPrepareProfileDir","Promise","all","adbStartSelectedPackage","buildAndPushExtensions","adbDiscoveryAndForwardRDPUnixSocket","rdpInstallExtensions","getName","reloadAllExtensions","runnerName","reloadErrors","sourceDir","extensions","res","reloadExtensionBySourceDir","reloadError","Error","set","size","extensionSourceDir","addonId","get","buildAndPushExtension","reloadAddon","error","registerCleanup","fn","add","exit","debug","clearArtifactsDir","getDeviceProfileDir","Object","keys","forEach","ignoredParam","warn","adbDevice","devices","discoverDevices","length","devicesMsg","map","dev","join","info","foundDevices","filter","device","JSON","stringify","firefoxApk","packages","discoverInstalledFirefoxAPKs","pkgsListMsg","pkgs","pkg","filteredPackages","line","pkgsList","amForceStopAPK","customPrefs","firefoxApp","adbRemoveOldArtifacts","profile","createProfile","app","foundOldArtifacts","detectOrRemoveOldArtifacts","getOrCreateArtifactsDir","deviceProfileDir","runShellCommand","pushFile","profileDir","firefoxApkComponent","startFirefoxAPK","buildSourceDir","tmpDir","extensionPath","extFileName","basename","adbExtensionPath","adbDiscoveryTimeout","stdin","process","handleCtrlC","str","key","ctrl","name","setUserAbortDiscovery","emitKeypressEvents","on","discoverRDPUnixSocket","maxDiscoveryTime","retryInterval","removeListener","tcpPort","forwardSocketSpec","startsWith","substr","setupForward","firefoxClient","port","client","extension","installTemporaryAddon","then","installResult","addon","id"],"sources":["../../src/extension-runners/firefox-android.js"],"sourcesContent":["/**\n * This module provide an ExtensionRunner subclass that manage an extension executed\n * in a Firefox for Android instance.\n */\n\nimport path from 'path';\nimport readline from 'readline';\n\nimport { withTempDir } from '../util/temp-dir.js';\nimport DefaultADBUtils from '../util/adb.js';\nimport {\n  MultiExtensionsReloadError,\n  UsageError,\n  WebExtError,\n} from '../errors.js';\nimport { findFreeTcpPort } from '../firefox/remote.js';\nimport { createLogger } from '../util/logger.js';\nimport { isTTY, setRawMode } from '../util/stdin.js';\n\nconst log = createLogger(import.meta.url);\n\nconst ignoredParams = {\n  profilePath: '--profile-path',\n  keepProfileChanges: '--keep-profile-changes',\n  browserConsole: '--browser-console',\n  preInstall: '--pre-install',\n  startUrl: '--start-url',\n  args: '--args',\n};\n\n// Default adbHost to 127.0.0.1 to prevent issues with nodejs 17\n// (because if not specified adbkit may default to ipv6 while\n// adb may still only be listening on the ipv4 address),\n// see https://github.com/mozilla/web-ext/issues/2337.\nconst DEFAULT_ADB_HOST = '127.0.0.1';\n\nconst getIgnoredParamsWarningsMessage = (optionName) => {\n  return `The Firefox for Android target does not support ${optionName}`;\n};\n\n/**\n * Implements an IExtensionRunner which manages a Firefox for Android instance.\n */\nexport class FirefoxAndroidExtensionRunner {\n  // Wait 3s before the next unix socket discovery loop.\n  static unixSocketDiscoveryRetryInterval = 3 * 1000;\n  // Wait for at most 3 minutes before giving up.\n  static unixSocketDiscoveryMaxTime = 3 * 60 * 1000;\n\n  params;\n  adbUtils;\n  exiting;\n  selectedAdbDevice;\n  selectedFirefoxApk;\n  selectedArtifactsDir;\n  selectedRDPSocketFile;\n  selectedTCPPort;\n  cleanupCallbacks;\n  adbExtensionsPathBySourceDir;\n  reloadableExtensions;\n  remoteFirefox;\n\n  constructor(params) {\n    this.params = params;\n    this.cleanupCallbacks = new Set();\n    this.adbExtensionsPathBySourceDir = new Map();\n    this.reloadableExtensions = new Map();\n\n    // Print warning for not currently supported options (e.g. preInstall,\n    // cloned profiles, browser console).\n    this.printIgnoredParamsWarnings();\n  }\n\n  async run() {\n    const {\n      adbBin,\n      adbHost = DEFAULT_ADB_HOST,\n      adbPort,\n      ADBUtils = DefaultADBUtils,\n    } = this.params;\n\n    this.adbUtils = new ADBUtils({\n      adbBin,\n      adbHost,\n      adbPort,\n    });\n\n    await this.adbDevicesDiscoveryAndSelect();\n    await this.apkPackagesDiscoveryAndSelect();\n    await this.adbForceStopSelectedPackage();\n\n    // Create profile prefs (with enabled remote RDP server), prepare the\n    // artifacts and temporary directory on the selected device, and\n    // push the profile preferences to the remote profile dir.\n    await this.adbPrepareProfileDir();\n\n    // NOTE: running Firefox for Android on the Android Emulator can be\n    // pretty slow, we can run the following 3 steps in parallel to speed up\n    // it a bit.\n    await Promise.all([\n      // Start Firefox for Android instance if not started yet.\n      // (Fennec would run in an temporary profile and so it is explicitly\n      // stopped, Fenix runs on its usual profile and so it may be already\n      // running).\n      this.adbStartSelectedPackage(),\n\n      // Build and push to devices all the extension xpis\n      // and keep track of the xpi built and uploaded by extension sourceDir.\n      this.buildAndPushExtensions(),\n\n      // Wait for RDP unix socket file created and\n      // Create an ADB forward connection on a free tcp port\n      this.adbDiscoveryAndForwardRDPUnixSocket(),\n    ]);\n\n    // Connect to RDP socket on the local tcp server, install all the pushed extension\n    // and keep track of the built and installed extension by extension sourceDir.\n    await this.rdpInstallExtensions();\n  }\n\n  // Method exported from the IExtensionRunner interface.\n\n  /**\n   * Returns the runner name.\n   */\n  getName() {\n    return 'Firefox Android';\n  }\n\n  /**\n   * Reloads all the extensions, collect any reload error and resolves to\n   * an array composed by a single ExtensionRunnerReloadResult object.\n   */\n  async reloadAllExtensions() {\n    const runnerName = this.getName();\n    const reloadErrors = new Map();\n\n    for (const { sourceDir } of this.params.extensions) {\n      const [res] = await this.reloadExtensionBySourceDir(sourceDir);\n      if (res.reloadError instanceof Error) {\n        reloadErrors.set(sourceDir, res.reloadError);\n      }\n    }\n\n    if (reloadErrors.size > 0) {\n      return [\n        {\n          runnerName,\n          reloadError: new MultiExtensionsReloadError(reloadErrors),\n        },\n      ];\n    }\n\n    return [{ runnerName }];\n  }\n\n  /**\n   * Reloads a single extension, collect any reload error and resolves to\n   * an array composed by a single ExtensionRunnerReloadResult object.\n   */\n  async reloadExtensionBySourceDir(extensionSourceDir) {\n    const runnerName = this.getName();\n    const addonId = this.reloadableExtensions.get(extensionSourceDir);\n\n    if (!addonId) {\n      return [\n        {\n          sourceDir: extensionSourceDir,\n          reloadError: new WebExtError(\n            'Extension not reloadable: ' +\n              `no addonId has been mapped to \"${extensionSourceDir}\"`,\n          ),\n          runnerName,\n        },\n      ];\n    }\n\n    try {\n      await this.buildAndPushExtension(extensionSourceDir);\n      await this.remoteFirefox.reloadAddon(addonId);\n    } catch (error) {\n      return [\n        {\n          sourceDir: extensionSourceDir,\n          reloadError: error,\n          runnerName,\n        },\n      ];\n    }\n\n    return [{ runnerName, sourceDir: extensionSourceDir }];\n  }\n\n  /**\n   * Register a callback to be called when the runner has been exited\n   * (e.g. the Firefox instance exits or the user has requested web-ext\n   * to exit).\n   */\n  registerCleanup(fn) {\n    this.cleanupCallbacks.add(fn);\n  }\n\n  /**\n   * Exits the runner, by closing the managed Firefox instance.\n   */\n  async exit() {\n    const { adbUtils, selectedAdbDevice, selectedArtifactsDir } = this;\n\n    this.exiting = true;\n\n    // If a Firefox for Android instance has been started,\n    // we should ensure that it has been stopped when we exit.\n    await this.adbForceStopSelectedPackage();\n\n    if (selectedArtifactsDir) {\n      log.debug('Cleaning up artifacts directory on the Android device...');\n      await adbUtils.clearArtifactsDir(selectedAdbDevice);\n    }\n\n    // Call all the registered cleanup callbacks.\n    for (const fn of this.cleanupCallbacks) {\n      try {\n        fn();\n      } catch (error) {\n        log.error(error);\n      }\n    }\n  }\n\n  // Private helper methods.\n\n  getDeviceProfileDir() {\n    return `${this.selectedArtifactsDir}/profile`;\n  }\n\n  printIgnoredParamsWarnings() {\n    Object.keys(ignoredParams).forEach((ignoredParam) => {\n      if (this.params[ignoredParam]) {\n        log.warn(getIgnoredParamsWarningsMessage(ignoredParams[ignoredParam]));\n      }\n    });\n  }\n\n  async adbDevicesDiscoveryAndSelect() {\n    const { adbUtils } = this;\n    const { adbDevice } = this.params;\n    let devices = [];\n\n    log.debug('Listing android devices');\n    devices = await adbUtils.discoverDevices();\n\n    if (devices.length === 0) {\n      throw new UsageError(\n        'No Android device found through ADB. ' +\n          'Make sure the device is connected and USB debugging is enabled.',\n      );\n    }\n\n    if (!adbDevice) {\n      const devicesMsg = devices.map((dev) => ` - ${dev}`).join('\\n');\n      log.info(`\\nAndroid devices found:\\n${devicesMsg}`);\n      throw new UsageError(\n        'Select an android device using --android-device=<name>',\n      );\n    }\n\n    const foundDevices = devices.filter((device) => {\n      return device === adbDevice;\n    });\n\n    if (foundDevices.length === 0) {\n      const devicesMsg = JSON.stringify(devices);\n      throw new UsageError(\n        `Android device ${adbDevice} was not found in list: ${devicesMsg}`,\n      );\n    }\n\n    this.selectedAdbDevice = foundDevices[0];\n    log.info(`Selected ADB device: ${this.selectedAdbDevice}`);\n  }\n\n  async apkPackagesDiscoveryAndSelect() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      params: { firefoxApk },\n    } = this;\n    // Discovery and select a Firefox for Android version.\n    const packages = await adbUtils.discoverInstalledFirefoxAPKs(\n      selectedAdbDevice,\n      firefoxApk,\n    );\n\n    if (packages.length === 0) {\n      throw new UsageError(\n        'No Firefox packages were found on the selected Android device',\n      );\n    }\n\n    const pkgsListMsg = (pkgs) => {\n      return pkgs.map((pkg) => ` - ${pkg}`).join('\\n');\n    };\n\n    if (!firefoxApk) {\n      log.info(`\\nPackages found:\\n${pkgsListMsg(packages)}`);\n\n      if (packages.length > 1) {\n        throw new UsageError('Select one of the packages using --firefox-apk');\n      }\n\n      // If only one APK has been found, select it even if it has not been\n      // specified explicitly on the comment line.\n      this.selectedFirefoxApk = packages[0];\n      log.info(`Selected Firefox for Android APK: ${this.selectedFirefoxApk}`);\n      return;\n    }\n\n    const filteredPackages = packages.filter((line) => line === firefoxApk);\n\n    if (filteredPackages.length === 0) {\n      const pkgsList = pkgsListMsg(filteredPackages);\n      throw new UsageError(\n        `Package ${firefoxApk} was not found in list: ${pkgsList}`,\n      );\n    }\n\n    this.selectedFirefoxApk = filteredPackages[0];\n    log.debug(`Selected Firefox for Android APK: ${this.selectedFirefoxApk}`);\n  }\n\n  async adbForceStopSelectedPackage() {\n    const { adbUtils, selectedAdbDevice, selectedFirefoxApk } = this;\n\n    log.info(`Stopping existing instances of ${selectedFirefoxApk}...`);\n    await adbUtils.amForceStopAPK(selectedAdbDevice, selectedFirefoxApk);\n  }\n\n  async adbPrepareProfileDir() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedFirefoxApk,\n      params: { customPrefs, firefoxApp, adbRemoveOldArtifacts },\n    } = this;\n    // Create the preferences file and the Fennec temporary profile.\n    log.debug(`Preparing a temporary profile for ${selectedFirefoxApk}...`);\n\n    const profile = await firefoxApp.createProfile({\n      app: 'fennec',\n      customPrefs,\n    });\n\n    // Check if there are any artifacts dirs from previous runs and\n    // automatically remove them if adbRemoteOldArtifacts is true.\n    const foundOldArtifacts = await adbUtils.detectOrRemoveOldArtifacts(\n      selectedAdbDevice,\n      adbRemoveOldArtifacts,\n    );\n\n    if (foundOldArtifacts) {\n      if (adbRemoveOldArtifacts) {\n        log.info(\n          'Old web-ext artifacts have been found and removed ' +\n            `from ${selectedAdbDevice} device`,\n        );\n      } else {\n        log.warn(\n          `Old artifacts directories have been found on ${selectedAdbDevice} ` +\n            'device. Use --adb-remove-old-artifacts to remove them automatically.',\n        );\n      }\n    }\n\n    // Choose a artifacts dir name for the assets pushed to the\n    // Android device.\n    this.selectedArtifactsDir =\n      await adbUtils.getOrCreateArtifactsDir(selectedAdbDevice);\n\n    const deviceProfileDir = this.getDeviceProfileDir();\n\n    await adbUtils.runShellCommand(selectedAdbDevice, [\n      'mkdir',\n      '-p',\n      deviceProfileDir,\n    ]);\n    await adbUtils.pushFile(\n      selectedAdbDevice,\n      path.join(profile.profileDir, 'user.js'),\n      `${deviceProfileDir}/user.js`,\n    );\n\n    log.debug(`Created temporary profile at ${deviceProfileDir}.`);\n  }\n\n  async adbStartSelectedPackage() {\n    const {\n      adbUtils,\n      selectedFirefoxApk,\n      selectedAdbDevice,\n      params: { firefoxApkComponent },\n    } = this;\n\n    const deviceProfileDir = this.getDeviceProfileDir();\n\n    log.info(`Starting ${selectedFirefoxApk}...`);\n\n    log.debug(`Using profile ${deviceProfileDir} (ignored by Fenix)`);\n\n    await adbUtils.startFirefoxAPK(\n      selectedAdbDevice,\n      selectedFirefoxApk,\n      firefoxApkComponent,\n      deviceProfileDir,\n    );\n  }\n\n  async buildAndPushExtension(sourceDir) {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedArtifactsDir,\n      params: { buildSourceDir },\n    } = this;\n\n    await withTempDir(async (tmpDir) => {\n      const { extensionPath } = await buildSourceDir(sourceDir, tmpDir.path());\n\n      const extFileName = path.basename(extensionPath, '.zip');\n\n      let adbExtensionPath = this.adbExtensionsPathBySourceDir.get(sourceDir);\n\n      if (!adbExtensionPath) {\n        adbExtensionPath = `${selectedArtifactsDir}/${extFileName}.xpi`;\n      }\n\n      log.debug(`Uploading ${extFileName} on the android device`);\n\n      await adbUtils.pushFile(\n        selectedAdbDevice,\n        extensionPath,\n        adbExtensionPath,\n      );\n\n      log.debug(`Upload completed: ${adbExtensionPath}`);\n\n      this.adbExtensionsPathBySourceDir.set(sourceDir, adbExtensionPath);\n    });\n  }\n\n  async buildAndPushExtensions() {\n    for (const { sourceDir } of this.params.extensions) {\n      await this.buildAndPushExtension(sourceDir);\n    }\n  }\n\n  async adbDiscoveryAndForwardRDPUnixSocket() {\n    const {\n      adbUtils,\n      selectedAdbDevice,\n      selectedFirefoxApk,\n      params: { adbDiscoveryTimeout },\n    } = this;\n\n    const stdin = this.params.stdin || process.stdin;\n\n    const { unixSocketDiscoveryRetryInterval } = FirefoxAndroidExtensionRunner;\n\n    let { unixSocketDiscoveryMaxTime } = FirefoxAndroidExtensionRunner;\n\n    if (typeof adbDiscoveryTimeout === 'number') {\n      unixSocketDiscoveryMaxTime = adbDiscoveryTimeout;\n    }\n\n    const handleCtrlC = (str, key) => {\n      if (key.ctrl && key.name === 'c') {\n        adbUtils.setUserAbortDiscovery(true);\n      }\n    };\n\n    // TODO: use noInput property to decide if we should\n    // disable direct keypress handling.\n    if (isTTY(stdin)) {\n      readline.emitKeypressEvents(stdin);\n      setRawMode(stdin, true);\n\n      stdin.on('keypress', handleCtrlC);\n    }\n\n    try {\n      // Got a debugger socket file to connect.\n      this.selectedRDPSocketFile = await adbUtils.discoverRDPUnixSocket(\n        selectedAdbDevice,\n        selectedFirefoxApk,\n        {\n          maxDiscoveryTime: unixSocketDiscoveryMaxTime,\n          retryInterval: unixSocketDiscoveryRetryInterval,\n        },\n      );\n    } finally {\n      if (isTTY(stdin)) {\n        stdin.removeListener('keypress', handleCtrlC);\n      }\n    }\n\n    log.debug(`RDP Socket File selected: ${this.selectedRDPSocketFile}`);\n\n    const tcpPort = await findFreeTcpPort();\n\n    // Log the chosen tcp port at info level (useful to the user to be able\n    // to connect the Firefox DevTools to the Firefox for Android instance).\n    log.info(`You can connect to this Android device on TCP port ${tcpPort}`);\n\n    const forwardSocketSpec = this.selectedRDPSocketFile.startsWith('@')\n      ? `localabstract:${this.selectedRDPSocketFile.substr(1)}`\n      : `localfilesystem:${this.selectedRDPSocketFile}`;\n\n    await adbUtils.setupForward(\n      selectedAdbDevice,\n      forwardSocketSpec,\n      `tcp:${tcpPort}`,\n    );\n\n    this.selectedTCPPort = tcpPort;\n  }\n\n  async rdpInstallExtensions() {\n    const {\n      selectedTCPPort,\n      params: { extensions, firefoxClient },\n    } = this;\n\n    const remoteFirefox = (this.remoteFirefox = await firefoxClient({\n      port: selectedTCPPort,\n    }));\n\n    // Exit and cleanup the extension runner if the connection to the\n    // remote Firefox for Android instance has been closed.\n    remoteFirefox.client.on('end', () => {\n      if (!this.exiting) {\n        log.info('Exiting the device because Firefox for Android disconnected');\n        this.exit();\n      }\n    });\n\n    // Install all the temporary addons.\n    for (const extension of extensions) {\n      const { sourceDir } = extension;\n      const adbExtensionPath = this.adbExtensionsPathBySourceDir.get(sourceDir);\n\n      if (!adbExtensionPath) {\n        throw new WebExtError(\n          `ADB extension path for \"${sourceDir}\" was unexpectedly empty`,\n        );\n      }\n\n      const addonId = await remoteFirefox\n        .installTemporaryAddon(adbExtensionPath)\n        .then((installResult) => {\n          return installResult.addon.id;\n        });\n\n      if (!addonId) {\n        throw new WebExtError(\n          'Received an empty addonId from ' +\n            `remoteFirefox.installTemporaryAddon(\"${adbExtensionPath}\")`,\n        );\n      }\n\n      this.reloadableExtensions.set(extension.sourceDir, addonId);\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,QAAQ,MAAM,UAAU;AAE/B,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,eAAe,MAAM,gBAAgB;AAC5C,SACEC,0BAA0B,EAC1BC,UAAU,EACVC,WAAW,QACN,cAAc;AACrB,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,KAAK,EAAEC,UAAU,QAAQ,kBAAkB;AAEpD,MAAMC,GAAG,GAAGH,YAAY,CAACI,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AAEzC,MAAMC,aAAa,GAAG;EACpBC,WAAW,EAAE,gBAAgB;EAC7BC,kBAAkB,EAAE,wBAAwB;EAC5CC,cAAc,EAAE,mBAAmB;EACnCC,UAAU,EAAE,eAAe;EAC3BC,QAAQ,EAAE,aAAa;EACvBC,IAAI,EAAE;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,WAAW;AAEpC,MAAMC,+BAA+B,GAAIC,UAAU,IAAK;EACtD,OAAO,mDAAmDA,UAAU,EAAE;AACxE,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,6BAA6B,CAAC;EACzC;EACA,OAAOC,gCAAgC,GAAG,CAAC,GAAG,IAAI;EAClD;EACA,OAAOC,0BAA0B,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;EAEjDC,MAAM;EACNC,QAAQ;EACRC,OAAO;EACPC,iBAAiB;EACjBC,kBAAkB;EAClBC,oBAAoB;EACpBC,qBAAqB;EACrBC,eAAe;EACfC,gBAAgB;EAChBC,4BAA4B;EAC5BC,oBAAoB;EACpBC,aAAa;EAEbC,WAAWA,CAACZ,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACQ,gBAAgB,GAAG,IAAIK,GAAG,CAAC,CAAC;IACjC,IAAI,CAACJ,4BAA4B,GAAG,IAAIK,GAAG,CAAC,CAAC;IAC7C,IAAI,CAACJ,oBAAoB,GAAG,IAAII,GAAG,CAAC,CAAC;;IAErC;IACA;IACA,IAAI,CAACC,0BAA0B,CAAC,CAAC;EACnC;EAEA,MAAMC,GAAGA,CAAA,EAAG;IACV,MAAM;MACJC,MAAM;MACNC,OAAO,GAAGxB,gBAAgB;MAC1ByB,OAAO;MACPC,QAAQ,GAAG7C;IACb,CAAC,GAAG,IAAI,CAACyB,MAAM;IAEf,IAAI,CAACC,QAAQ,GAAG,IAAImB,QAAQ,CAAC;MAC3BH,MAAM;MACNC,OAAO;MACPC;IACF,CAAC,CAAC;IAEF,MAAM,IAAI,CAACE,4BAA4B,CAAC,CAAC;IACzC,MAAM,IAAI,CAACC,6BAA6B,CAAC,CAAC;IAC1C,MAAM,IAAI,CAACC,2BAA2B,CAAC,CAAC;;IAExC;IACA;IACA;IACA,MAAM,IAAI,CAACC,oBAAoB,CAAC,CAAC;;IAEjC;IACA;IACA;IACA,MAAMC,OAAO,CAACC,GAAG,CAAC;IAChB;IACA;IACA;IACA;IACA,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAE9B;IACA;IACA,IAAI,CAACC,sBAAsB,CAAC,CAAC;IAE7B;IACA;IACA,IAAI,CAACC,mCAAmC,CAAC,CAAC,CAC3C,CAAC;;IAEF;IACA;IACA,MAAM,IAAI,CAACC,oBAAoB,CAAC,CAAC;EACnC;;EAEA;;EAEA;AACF;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,OAAO,iBAAiB;EAC1B;;EAEA;AACF;AACA;AACA;EACE,MAAMC,mBAAmBA,CAAA,EAAG;IAC1B,MAAMC,UAAU,GAAG,IAAI,CAACF,OAAO,CAAC,CAAC;IACjC,MAAMG,YAAY,GAAG,IAAIpB,GAAG,CAAC,CAAC;IAE9B,KAAK,MAAM;MAAEqB;IAAU,CAAC,IAAI,IAAI,CAACnC,MAAM,CAACoC,UAAU,EAAE;MAClD,MAAM,CAACC,GAAG,CAAC,GAAG,MAAM,IAAI,CAACC,0BAA0B,CAACH,SAAS,CAAC;MAC9D,IAAIE,GAAG,CAACE,WAAW,YAAYC,KAAK,EAAE;QACpCN,YAAY,CAACO,GAAG,CAACN,SAAS,EAAEE,GAAG,CAACE,WAAW,CAAC;MAC9C;IACF;IAEA,IAAIL,YAAY,CAACQ,IAAI,GAAG,CAAC,EAAE;MACzB,OAAO,CACL;QACET,UAAU;QACVM,WAAW,EAAE,IAAI/D,0BAA0B,CAAC0D,YAAY;MAC1D,CAAC,CACF;IACH;IAEA,OAAO,CAAC;MAAED;IAAW,CAAC,CAAC;EACzB;;EAEA;AACF;AACA;AACA;EACE,MAAMK,0BAA0BA,CAACK,kBAAkB,EAAE;IACnD,MAAMV,UAAU,GAAG,IAAI,CAACF,OAAO,CAAC,CAAC;IACjC,MAAMa,OAAO,GAAG,IAAI,CAAClC,oBAAoB,CAACmC,GAAG,CAACF,kBAAkB,CAAC;IAEjE,IAAI,CAACC,OAAO,EAAE;MACZ,OAAO,CACL;QACET,SAAS,EAAEQ,kBAAkB;QAC7BJ,WAAW,EAAE,IAAI7D,WAAW,CAC1B,4BAA4B,GAC1B,kCAAkCiE,kBAAkB,GACxD,CAAC;QACDV;MACF,CAAC,CACF;IACH;IAEA,IAAI;MACF,MAAM,IAAI,CAACa,qBAAqB,CAACH,kBAAkB,CAAC;MACpD,MAAM,IAAI,CAAChC,aAAa,CAACoC,WAAW,CAACH,OAAO,CAAC;IAC/C,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,OAAO,CACL;QACEb,SAAS,EAAEQ,kBAAkB;QAC7BJ,WAAW,EAAES,KAAK;QAClBf;MACF,CAAC,CACF;IACH;IAEA,OAAO,CAAC;MAAEA,UAAU;MAAEE,SAAS,EAAEQ;IAAmB,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;EACEM,eAAeA,CAACC,EAAE,EAAE;IAClB,IAAI,CAAC1C,gBAAgB,CAAC2C,GAAG,CAACD,EAAE,CAAC;EAC/B;;EAEA;AACF;AACA;EACE,MAAME,IAAIA,CAAA,EAAG;IACX,MAAM;MAAEnD,QAAQ;MAAEE,iBAAiB;MAAEE;IAAqB,CAAC,GAAG,IAAI;IAElE,IAAI,CAACH,OAAO,GAAG,IAAI;;IAEnB;IACA;IACA,MAAM,IAAI,CAACqB,2BAA2B,CAAC,CAAC;IAExC,IAAIlB,oBAAoB,EAAE;MACxBtB,GAAG,CAACsE,KAAK,CAAC,0DAA0D,CAAC;MACrE,MAAMpD,QAAQ,CAACqD,iBAAiB,CAACnD,iBAAiB,CAAC;IACrD;;IAEA;IACA,KAAK,MAAM+C,EAAE,IAAI,IAAI,CAAC1C,gBAAgB,EAAE;MACtC,IAAI;QACF0C,EAAE,CAAC,CAAC;MACN,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdjE,GAAG,CAACiE,KAAK,CAACA,KAAK,CAAC;MAClB;IACF;EACF;;EAEA;;EAEAO,mBAAmBA,CAAA,EAAG;IACpB,OAAO,GAAG,IAAI,CAAClD,oBAAoB,UAAU;EAC/C;EAEAU,0BAA0BA,CAAA,EAAG;IAC3ByC,MAAM,CAACC,IAAI,CAACtE,aAAa,CAAC,CAACuE,OAAO,CAAEC,YAAY,IAAK;MACnD,IAAI,IAAI,CAAC3D,MAAM,CAAC2D,YAAY,CAAC,EAAE;QAC7B5E,GAAG,CAAC6E,IAAI,CAACjE,+BAA+B,CAACR,aAAa,CAACwE,YAAY,CAAC,CAAC,CAAC;MACxE;IACF,CAAC,CAAC;EACJ;EAEA,MAAMtC,4BAA4BA,CAAA,EAAG;IACnC,MAAM;MAAEpB;IAAS,CAAC,GAAG,IAAI;IACzB,MAAM;MAAE4D;IAAU,CAAC,GAAG,IAAI,CAAC7D,MAAM;IACjC,IAAI8D,OAAO,GAAG,EAAE;IAEhB/E,GAAG,CAACsE,KAAK,CAAC,yBAAyB,CAAC;IACpCS,OAAO,GAAG,MAAM7D,QAAQ,CAAC8D,eAAe,CAAC,CAAC;IAE1C,IAAID,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIvF,UAAU,CAClB,uCAAuC,GACrC,iEACJ,CAAC;IACH;IAEA,IAAI,CAACoF,SAAS,EAAE;MACd,MAAMI,UAAU,GAAGH,OAAO,CAACI,GAAG,CAAEC,GAAG,IAAK,MAAMA,GAAG,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MAC/DrF,GAAG,CAACsF,IAAI,CAAC,6BAA6BJ,UAAU,EAAE,CAAC;MACnD,MAAM,IAAIxF,UAAU,CAClB,wDACF,CAAC;IACH;IAEA,MAAM6F,YAAY,GAAGR,OAAO,CAACS,MAAM,CAAEC,MAAM,IAAK;MAC9C,OAAOA,MAAM,KAAKX,SAAS;IAC7B,CAAC,CAAC;IAEF,IAAIS,YAAY,CAACN,MAAM,KAAK,CAAC,EAAE;MAC7B,MAAMC,UAAU,GAAGQ,IAAI,CAACC,SAAS,CAACZ,OAAO,CAAC;MAC1C,MAAM,IAAIrF,UAAU,CAClB,kBAAkBoF,SAAS,2BAA2BI,UAAU,EAClE,CAAC;IACH;IAEA,IAAI,CAAC9D,iBAAiB,GAAGmE,YAAY,CAAC,CAAC,CAAC;IACxCvF,GAAG,CAACsF,IAAI,CAAC,wBAAwB,IAAI,CAAClE,iBAAiB,EAAE,CAAC;EAC5D;EAEA,MAAMmB,6BAA6BA,CAAA,EAAG;IACpC,MAAM;MACJrB,QAAQ;MACRE,iBAAiB;MACjBH,MAAM,EAAE;QAAE2E;MAAW;IACvB,CAAC,GAAG,IAAI;IACR;IACA,MAAMC,QAAQ,GAAG,MAAM3E,QAAQ,CAAC4E,4BAA4B,CAC1D1E,iBAAiB,EACjBwE,UACF,CAAC;IAED,IAAIC,QAAQ,CAACZ,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM,IAAIvF,UAAU,CAClB,+DACF,CAAC;IACH;IAEA,MAAMqG,WAAW,GAAIC,IAAI,IAAK;MAC5B,OAAOA,IAAI,CAACb,GAAG,CAAEc,GAAG,IAAK,MAAMA,GAAG,EAAE,CAAC,CAACZ,IAAI,CAAC,IAAI,CAAC;IAClD,CAAC;IAED,IAAI,CAACO,UAAU,EAAE;MACf5F,GAAG,CAACsF,IAAI,CAAC,sBAAsBS,WAAW,CAACF,QAAQ,CAAC,EAAE,CAAC;MAEvD,IAAIA,QAAQ,CAACZ,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM,IAAIvF,UAAU,CAAC,gDAAgD,CAAC;MACxE;;MAEA;MACA;MACA,IAAI,CAAC2B,kBAAkB,GAAGwE,QAAQ,CAAC,CAAC,CAAC;MACrC7F,GAAG,CAACsF,IAAI,CAAC,qCAAqC,IAAI,CAACjE,kBAAkB,EAAE,CAAC;MACxE;IACF;IAEA,MAAM6E,gBAAgB,GAAGL,QAAQ,CAACL,MAAM,CAAEW,IAAI,IAAKA,IAAI,KAAKP,UAAU,CAAC;IAEvE,IAAIM,gBAAgB,CAACjB,MAAM,KAAK,CAAC,EAAE;MACjC,MAAMmB,QAAQ,GAAGL,WAAW,CAACG,gBAAgB,CAAC;MAC9C,MAAM,IAAIxG,UAAU,CAClB,WAAWkG,UAAU,2BAA2BQ,QAAQ,EAC1D,CAAC;IACH;IAEA,IAAI,CAAC/E,kBAAkB,GAAG6E,gBAAgB,CAAC,CAAC,CAAC;IAC7ClG,GAAG,CAACsE,KAAK,CAAC,qCAAqC,IAAI,CAACjD,kBAAkB,EAAE,CAAC;EAC3E;EAEA,MAAMmB,2BAA2BA,CAAA,EAAG;IAClC,MAAM;MAAEtB,QAAQ;MAAEE,iBAAiB;MAAEC;IAAmB,CAAC,GAAG,IAAI;IAEhErB,GAAG,CAACsF,IAAI,CAAC,kCAAkCjE,kBAAkB,KAAK,CAAC;IACnE,MAAMH,QAAQ,CAACmF,cAAc,CAACjF,iBAAiB,EAAEC,kBAAkB,CAAC;EACtE;EAEA,MAAMoB,oBAAoBA,CAAA,EAAG;IAC3B,MAAM;MACJvB,QAAQ;MACRE,iBAAiB;MACjBC,kBAAkB;MAClBJ,MAAM,EAAE;QAAEqF,WAAW;QAAEC,UAAU;QAAEC;MAAsB;IAC3D,CAAC,GAAG,IAAI;IACR;IACAxG,GAAG,CAACsE,KAAK,CAAC,qCAAqCjD,kBAAkB,KAAK,CAAC;IAEvE,MAAMoF,OAAO,GAAG,MAAMF,UAAU,CAACG,aAAa,CAAC;MAC7CC,GAAG,EAAE,QAAQ;MACbL;IACF,CAAC,CAAC;;IAEF;IACA;IACA,MAAMM,iBAAiB,GAAG,MAAM1F,QAAQ,CAAC2F,0BAA0B,CACjEzF,iBAAiB,EACjBoF,qBACF,CAAC;IAED,IAAII,iBAAiB,EAAE;MACrB,IAAIJ,qBAAqB,EAAE;QACzBxG,GAAG,CAACsF,IAAI,CACN,oDAAoD,GAClD,QAAQlE,iBAAiB,SAC7B,CAAC;MACH,CAAC,MAAM;QACLpB,GAAG,CAAC6E,IAAI,CACN,gDAAgDzD,iBAAiB,GAAG,GAClE,sEACJ,CAAC;MACH;IACF;;IAEA;IACA;IACA,IAAI,CAACE,oBAAoB,GACvB,MAAMJ,QAAQ,CAAC4F,uBAAuB,CAAC1F,iBAAiB,CAAC;IAE3D,MAAM2F,gBAAgB,GAAG,IAAI,CAACvC,mBAAmB,CAAC,CAAC;IAEnD,MAAMtD,QAAQ,CAAC8F,eAAe,CAAC5F,iBAAiB,EAAE,CAChD,OAAO,EACP,IAAI,EACJ2F,gBAAgB,CACjB,CAAC;IACF,MAAM7F,QAAQ,CAAC+F,QAAQ,CACrB7F,iBAAiB,EACjB/B,IAAI,CAACgG,IAAI,CAACoB,OAAO,CAACS,UAAU,EAAE,SAAS,CAAC,EACxC,GAAGH,gBAAgB,UACrB,CAAC;IAED/G,GAAG,CAACsE,KAAK,CAAC,gCAAgCyC,gBAAgB,GAAG,CAAC;EAChE;EAEA,MAAMnE,uBAAuBA,CAAA,EAAG;IAC9B,MAAM;MACJ1B,QAAQ;MACRG,kBAAkB;MAClBD,iBAAiB;MACjBH,MAAM,EAAE;QAAEkG;MAAoB;IAChC,CAAC,GAAG,IAAI;IAER,MAAMJ,gBAAgB,GAAG,IAAI,CAACvC,mBAAmB,CAAC,CAAC;IAEnDxE,GAAG,CAACsF,IAAI,CAAC,YAAYjE,kBAAkB,KAAK,CAAC;IAE7CrB,GAAG,CAACsE,KAAK,CAAC,iBAAiByC,gBAAgB,qBAAqB,CAAC;IAEjE,MAAM7F,QAAQ,CAACkG,eAAe,CAC5BhG,iBAAiB,EACjBC,kBAAkB,EAClB8F,mBAAmB,EACnBJ,gBACF,CAAC;EACH;EAEA,MAAMhD,qBAAqBA,CAACX,SAAS,EAAE;IACrC,MAAM;MACJlC,QAAQ;MACRE,iBAAiB;MACjBE,oBAAoB;MACpBL,MAAM,EAAE;QAAEoG;MAAe;IAC3B,CAAC,GAAG,IAAI;IAER,MAAM9H,WAAW,CAAC,MAAO+H,MAAM,IAAK;MAClC,MAAM;QAAEC;MAAc,CAAC,GAAG,MAAMF,cAAc,CAACjE,SAAS,EAAEkE,MAAM,CAACjI,IAAI,CAAC,CAAC,CAAC;MAExE,MAAMmI,WAAW,GAAGnI,IAAI,CAACoI,QAAQ,CAACF,aAAa,EAAE,MAAM,CAAC;MAExD,IAAIG,gBAAgB,GAAG,IAAI,CAAChG,4BAA4B,CAACoC,GAAG,CAACV,SAAS,CAAC;MAEvE,IAAI,CAACsE,gBAAgB,EAAE;QACrBA,gBAAgB,GAAG,GAAGpG,oBAAoB,IAAIkG,WAAW,MAAM;MACjE;MAEAxH,GAAG,CAACsE,KAAK,CAAC,aAAakD,WAAW,wBAAwB,CAAC;MAE3D,MAAMtG,QAAQ,CAAC+F,QAAQ,CACrB7F,iBAAiB,EACjBmG,aAAa,EACbG,gBACF,CAAC;MAED1H,GAAG,CAACsE,KAAK,CAAC,qBAAqBoD,gBAAgB,EAAE,CAAC;MAElD,IAAI,CAAChG,4BAA4B,CAACgC,GAAG,CAACN,SAAS,EAAEsE,gBAAgB,CAAC;IACpE,CAAC,CAAC;EACJ;EAEA,MAAM7E,sBAAsBA,CAAA,EAAG;IAC7B,KAAK,MAAM;MAAEO;IAAU,CAAC,IAAI,IAAI,CAACnC,MAAM,CAACoC,UAAU,EAAE;MAClD,MAAM,IAAI,CAACU,qBAAqB,CAACX,SAAS,CAAC;IAC7C;EACF;EAEA,MAAMN,mCAAmCA,CAAA,EAAG;IAC1C,MAAM;MACJ5B,QAAQ;MACRE,iBAAiB;MACjBC,kBAAkB;MAClBJ,MAAM,EAAE;QAAE0G;MAAoB;IAChC,CAAC,GAAG,IAAI;IAER,MAAMC,KAAK,GAAG,IAAI,CAAC3G,MAAM,CAAC2G,KAAK,IAAIC,OAAO,CAACD,KAAK;IAEhD,MAAM;MAAE7G;IAAiC,CAAC,GAAGD,6BAA6B;IAE1E,IAAI;MAAEE;IAA2B,CAAC,GAAGF,6BAA6B;IAElE,IAAI,OAAO6G,mBAAmB,KAAK,QAAQ,EAAE;MAC3C3G,0BAA0B,GAAG2G,mBAAmB;IAClD;IAEA,MAAMG,WAAW,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;MAChC,IAAIA,GAAG,CAACC,IAAI,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;QAChChH,QAAQ,CAACiH,qBAAqB,CAAC,IAAI,CAAC;MACtC;IACF,CAAC;;IAED;IACA;IACA,IAAIrI,KAAK,CAAC8H,KAAK,CAAC,EAAE;MAChBtI,QAAQ,CAAC8I,kBAAkB,CAACR,KAAK,CAAC;MAClC7H,UAAU,CAAC6H,KAAK,EAAE,IAAI,CAAC;MAEvBA,KAAK,CAACS,EAAE,CAAC,UAAU,EAAEP,WAAW,CAAC;IACnC;IAEA,IAAI;MACF;MACA,IAAI,CAACvG,qBAAqB,GAAG,MAAML,QAAQ,CAACoH,qBAAqB,CAC/DlH,iBAAiB,EACjBC,kBAAkB,EAClB;QACEkH,gBAAgB,EAAEvH,0BAA0B;QAC5CwH,aAAa,EAAEzH;MACjB,CACF,CAAC;IACH,CAAC,SAAS;MACR,IAAIjB,KAAK,CAAC8H,KAAK,CAAC,EAAE;QAChBA,KAAK,CAACa,cAAc,CAAC,UAAU,EAAEX,WAAW,CAAC;MAC/C;IACF;IAEA9H,GAAG,CAACsE,KAAK,CAAC,6BAA6B,IAAI,CAAC/C,qBAAqB,EAAE,CAAC;IAEpE,MAAMmH,OAAO,GAAG,MAAM9I,eAAe,CAAC,CAAC;;IAEvC;IACA;IACAI,GAAG,CAACsF,IAAI,CAAC,sDAAsDoD,OAAO,EAAE,CAAC;IAEzE,MAAMC,iBAAiB,GAAG,IAAI,CAACpH,qBAAqB,CAACqH,UAAU,CAAC,GAAG,CAAC,GAChE,iBAAiB,IAAI,CAACrH,qBAAqB,CAACsH,MAAM,CAAC,CAAC,CAAC,EAAE,GACvD,mBAAmB,IAAI,CAACtH,qBAAqB,EAAE;IAEnD,MAAML,QAAQ,CAAC4H,YAAY,CACzB1H,iBAAiB,EACjBuH,iBAAiB,EACjB,OAAOD,OAAO,EAChB,CAAC;IAED,IAAI,CAAClH,eAAe,GAAGkH,OAAO;EAChC;EAEA,MAAM3F,oBAAoBA,CAAA,EAAG;IAC3B,MAAM;MACJvB,eAAe;MACfP,MAAM,EAAE;QAAEoC,UAAU;QAAE0F;MAAc;IACtC,CAAC,GAAG,IAAI;IAER,MAAMnH,aAAa,GAAI,IAAI,CAACA,aAAa,GAAG,MAAMmH,aAAa,CAAC;MAC9DC,IAAI,EAAExH;IACR,CAAC,CAAE;;IAEH;IACA;IACAI,aAAa,CAACqH,MAAM,CAACZ,EAAE,CAAC,KAAK,EAAE,MAAM;MACnC,IAAI,CAAC,IAAI,CAAClH,OAAO,EAAE;QACjBnB,GAAG,CAACsF,IAAI,CAAC,6DAA6D,CAAC;QACvE,IAAI,CAACjB,IAAI,CAAC,CAAC;MACb;IACF,CAAC,CAAC;;IAEF;IACA,KAAK,MAAM6E,SAAS,IAAI7F,UAAU,EAAE;MAClC,MAAM;QAAED;MAAU,CAAC,GAAG8F,SAAS;MAC/B,MAAMxB,gBAAgB,GAAG,IAAI,CAAChG,4BAA4B,CAACoC,GAAG,CAACV,SAAS,CAAC;MAEzE,IAAI,CAACsE,gBAAgB,EAAE;QACrB,MAAM,IAAI/H,WAAW,CACnB,2BAA2ByD,SAAS,0BACtC,CAAC;MACH;MAEA,MAAMS,OAAO,GAAG,MAAMjC,aAAa,CAChCuH,qBAAqB,CAACzB,gBAAgB,CAAC,CACvC0B,IAAI,CAAEC,aAAa,IAAK;QACvB,OAAOA,aAAa,CAACC,KAAK,CAACC,EAAE;MAC/B,CAAC,CAAC;MAEJ,IAAI,CAAC1F,OAAO,EAAE;QACZ,MAAM,IAAIlE,WAAW,CACnB,iCAAiC,GAC/B,wCAAwC+H,gBAAgB,IAC5D,CAAC;MACH;MAEA,IAAI,CAAC/F,oBAAoB,CAAC+B,GAAG,CAACwF,SAAS,CAAC9F,SAAS,EAAES,OAAO,CAAC;IAC7D;EACF;AACF","ignoreList":[]}