{"version":3,"file":"file-exists.js","names":["fs","isErrorWithCode","fileExists","path","fileIsReadable","f","access","constants","R_OK","stat","isFile","error"],"sources":["../../src/util/file-exists.js"],"sourcesContent":["/* @flow */\nimport {fs} from 'mz';\n\nimport {isErrorWithCode} from '../errors.js';\n\ntype FileExistsOptions = {\n  fileIsReadable: (filePath: string) => Promise<boolean>,\n};\n\n/*\n * Resolves true if the path is a readable file.\n *\n * Usage:\n *\n * const exists = await fileExists(filePath);\n * if (exists) {\n *   // ...\n * }\n *\n * */\nexport default async function fileExists(\n  path: string,\n  {\n    fileIsReadable = (f) => fs.access(f, fs.constants.R_OK),\n  }: FileExistsOptions = {}\n): Promise<boolean> {\n  try {\n    await fileIsReadable(path);\n    const stat = await fs.stat(path);\n    return stat.isFile();\n  } catch (error) {\n    if (isErrorWithCode(['EACCES', 'ENOENT'], error)) {\n      return false;\n    }\n    throw error;\n  }\n}\n"],"mappings":"AACA,SAAQA,EAAR,QAAiB,IAAjB;AAEA,SAAQC,eAAR,QAA8B,cAA9B;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeC,UAAf,CACbC,IADa,EAEb;EACEC,cAAc,GAAIC,CAAD,IAAOL,EAAE,CAACM,MAAH,CAAUD,CAAV,EAAaL,EAAE,CAACO,SAAH,CAAaC,IAA1B;AAD1B,IAEuB,EAJV,EAKK;EAClB,IAAI;IACF,MAAMJ,cAAc,CAACD,IAAD,CAApB;IACA,MAAMM,IAAI,GAAG,MAAMT,EAAE,CAACS,IAAH,CAAQN,IAAR,CAAnB;IACA,OAAOM,IAAI,CAACC,MAAL,EAAP;EACD,CAJD,CAIE,OAAOC,KAAP,EAAc;IACd,IAAIV,eAAe,CAAC,CAAC,QAAD,EAAW,QAAX,CAAD,EAAuBU,KAAvB,CAAnB,EAAkD;MAChD,OAAO,KAAP;IACD;;IACD,MAAMA,KAAN;EACD;AACF"}