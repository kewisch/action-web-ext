{"version":3,"file":"file-exists.js","names":["fs","isErrorWithCode","fileExists","path","fileIsReadable","f","access","constants","R_OK","stat","isFile","error"],"sources":["../../src/util/file-exists.js"],"sourcesContent":["import { fs } from 'mz';\n\nimport { isErrorWithCode } from '../errors.js';\n\n/*\n * Resolves true if the path is a readable file.\n *\n * Usage:\n *\n * const exists = await fileExists(filePath);\n * if (exists) {\n *   // ...\n * }\n *\n * */\nexport default async function fileExists(\n  path,\n  { fileIsReadable = (f) => fs.access(f, fs.constants.R_OK) } = {},\n) {\n  try {\n    await fileIsReadable(path);\n    const stat = await fs.stat(path);\n    return stat.isFile();\n  } catch (error) {\n    if (isErrorWithCode(['EACCES', 'ENOENT'], error)) {\n      return false;\n    }\n    throw error;\n  }\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,IAAI;AAEvB,SAASC,eAAe,QAAQ,cAAc;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeC,UAAUA,CACtCC,IAAI,EACJ;EAAEC,cAAc,GAAIC,CAAC,IAAKL,EAAE,CAACM,MAAM,CAACD,CAAC,EAAEL,EAAE,CAACO,SAAS,CAACC,IAAI;AAAE,CAAC,GAAG,CAAC,CAAC,EAChE;EACA,IAAI;IACF,MAAMJ,cAAc,CAACD,IAAI,CAAC;IAC1B,MAAMM,IAAI,GAAG,MAAMT,EAAE,CAACS,IAAI,CAACN,IAAI,CAAC;IAChC,OAAOM,IAAI,CAACC,MAAM,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIV,eAAe,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAEU,KAAK,CAAC,EAAE;MAChD,OAAO,KAAK;IACd;IACA,MAAMA,KAAK;EACb;AACF","ignoreList":[]}