{"version":3,"file":"artifacts.js","names":["fs","mkdirp","defaultAsyncMkdirp","UsageError","isErrorWithCode","createLogger","log","import","meta","url","defaultAsyncFsAccess","access","bind","prepareArtifactsDir","artifactsDir","asyncMkdirp","asyncFsAccess","stats","stat","isDirectory","W_OK","accessErr","error","debug","mkdirErr"],"sources":["../../src/util/artifacts.js"],"sourcesContent":["import { fs } from 'mz';\nimport { mkdirp as defaultAsyncMkdirp } from 'mkdirp';\n\nimport { UsageError, isErrorWithCode } from '../errors.js';\nimport { createLogger } from './logger.js';\n\nconst log = createLogger(import.meta.url);\n\nconst defaultAsyncFsAccess = fs.access.bind(fs);\n\nexport async function prepareArtifactsDir(\n  artifactsDir,\n  {\n    asyncMkdirp = defaultAsyncMkdirp,\n    asyncFsAccess = defaultAsyncFsAccess,\n  } = {},\n) {\n  try {\n    const stats = await fs.stat(artifactsDir);\n    if (!stats.isDirectory()) {\n      throw new UsageError(\n        `--artifacts-dir=\"${artifactsDir}\" exists but it is not a directory.`,\n      );\n    }\n    // If the artifactsDir already exists, check that we have the write permissions on it.\n    try {\n      await asyncFsAccess(artifactsDir, fs.W_OK);\n    } catch (accessErr) {\n      if (isErrorWithCode('EACCES', accessErr)) {\n        throw new UsageError(\n          `--artifacts-dir=\"${artifactsDir}\" exists but the user lacks ` +\n            'permissions on it.',\n        );\n      } else {\n        throw accessErr;\n      }\n    }\n  } catch (error) {\n    if (isErrorWithCode('EACCES', error)) {\n      // Handle errors when the artifactsDir cannot be accessed.\n      throw new UsageError(\n        `Cannot access --artifacts-dir=\"${artifactsDir}\" because the user ` +\n          `lacks permissions: ${error}`,\n      );\n    } else if (isErrorWithCode('ENOENT', error)) {\n      // Create the artifact dir if it doesn't exist yet.\n      try {\n        log.debug(`Creating artifacts directory: ${artifactsDir}`);\n        await asyncMkdirp(artifactsDir);\n      } catch (mkdirErr) {\n        if (isErrorWithCode('EACCES', mkdirErr)) {\n          // Handle errors when the artifactsDir cannot be created for lack of permissions.\n          throw new UsageError(\n            `Cannot create --artifacts-dir=\"${artifactsDir}\" because the ` +\n              `user lacks permissions: ${mkdirErr}`,\n          );\n        } else {\n          throw mkdirErr;\n        }\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  return artifactsDir;\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,IAAI;AACvB,SAASC,MAAM,IAAIC,kBAAkB,QAAQ,QAAQ;AAErD,SAASC,UAAU,EAAEC,eAAe,QAAQ,cAAc;AAC1D,SAASC,YAAY,QAAQ,aAAa;AAE1C,MAAMC,GAAG,GAAGD,YAAY,CAACE,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AAEzC,MAAMC,oBAAoB,GAAGV,EAAE,CAACW,MAAM,CAACC,IAAI,CAACZ,EAAE,CAAC;AAE/C,OAAO,eAAea,mBAAmBA,CACvCC,YAAY,EACZ;EACEC,WAAW,GAAGb,kBAAkB;EAChCc,aAAa,GAAGN;AAClB,CAAC,GAAG,CAAC,CAAC,EACN;EACA,IAAI;IACF,MAAMO,KAAK,GAAG,MAAMjB,EAAE,CAACkB,IAAI,CAACJ,YAAY,CAAC;IACzC,IAAI,CAACG,KAAK,CAACE,WAAW,CAAC,CAAC,EAAE;MACxB,MAAM,IAAIhB,UAAU,CAClB,oBAAoBW,YAAY,qCAClC,CAAC;IACH;IACA;IACA,IAAI;MACF,MAAME,aAAa,CAACF,YAAY,EAAEd,EAAE,CAACoB,IAAI,CAAC;IAC5C,CAAC,CAAC,OAAOC,SAAS,EAAE;MAClB,IAAIjB,eAAe,CAAC,QAAQ,EAAEiB,SAAS,CAAC,EAAE;QACxC,MAAM,IAAIlB,UAAU,CAClB,oBAAoBW,YAAY,8BAA8B,GAC5D,oBACJ,CAAC;MACH,CAAC,MAAM;QACL,MAAMO,SAAS;MACjB;IACF;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIlB,eAAe,CAAC,QAAQ,EAAEkB,KAAK,CAAC,EAAE;MACpC;MACA,MAAM,IAAInB,UAAU,CAClB,kCAAkCW,YAAY,qBAAqB,GACjE,sBAAsBQ,KAAK,EAC/B,CAAC;IACH,CAAC,MAAM,IAAIlB,eAAe,CAAC,QAAQ,EAAEkB,KAAK,CAAC,EAAE;MAC3C;MACA,IAAI;QACFhB,GAAG,CAACiB,KAAK,CAAC,iCAAiCT,YAAY,EAAE,CAAC;QAC1D,MAAMC,WAAW,CAACD,YAAY,CAAC;MACjC,CAAC,CAAC,OAAOU,QAAQ,EAAE;QACjB,IAAIpB,eAAe,CAAC,QAAQ,EAAEoB,QAAQ,CAAC,EAAE;UACvC;UACA,MAAM,IAAIrB,UAAU,CAClB,kCAAkCW,YAAY,gBAAgB,GAC5D,2BAA2BU,QAAQ,EACvC,CAAC;QACH,CAAC,MAAM;UACL,MAAMA,QAAQ;QAChB;MACF;IACF,CAAC,MAAM;MACL,MAAMF,KAAK;IACb;EACF;EAEA,OAAOR,YAAY;AACrB","ignoreList":[]}