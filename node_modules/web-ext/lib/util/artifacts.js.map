{"version":3,"file":"artifacts.js","names":["fs","defaultAsyncMkdirp","UsageError","isErrorWithCode","createLogger","log","import","meta","url","defaultAsyncFsAccess","access","bind","prepareArtifactsDir","artifactsDir","asyncMkdirp","asyncFsAccess","stats","stat","isDirectory","W_OK","accessErr","error","debug","mkdirErr"],"sources":["../../src/util/artifacts.js"],"sourcesContent":["/* @flow */\nimport {fs} from 'mz';\nimport defaultAsyncMkdirp from 'mkdirp';\n\nimport {UsageError, isErrorWithCode} from '../errors.js';\nimport {createLogger} from './logger.js';\n\nconst log = createLogger(import.meta.url);\n\nconst defaultAsyncFsAccess: typeof fs.access = fs.access.bind(fs);\n\ntype PrepareArtifactsDirOptions = {\n  asyncMkdirp?: typeof defaultAsyncMkdirp,\n  asyncFsAccess?: typeof defaultAsyncFsAccess,\n}\n\nexport async function prepareArtifactsDir(\n  artifactsDir: string,\n  {\n    asyncMkdirp = defaultAsyncMkdirp,\n    asyncFsAccess = defaultAsyncFsAccess,\n  }: PrepareArtifactsDirOptions = {},\n): Promise<string> {\n  try {\n    const stats = await fs.stat(artifactsDir);\n    if (!stats.isDirectory()) {\n      throw new UsageError(\n        `--artifacts-dir=\"${artifactsDir}\" exists but it is not a directory.`);\n    }\n    // If the artifactsDir already exists, check that we have the write permissions on it.\n    try {\n      await asyncFsAccess(artifactsDir, fs.W_OK);\n    } catch (accessErr) {\n      if (isErrorWithCode('EACCES', accessErr)) {\n        throw new UsageError(\n          `--artifacts-dir=\"${artifactsDir}\" exists but the user lacks ` +\n          'permissions on it.');\n      } else {\n        throw accessErr;\n      }\n    }\n  } catch (error) {\n    if (isErrorWithCode('EACCES', error)) {\n      // Handle errors when the artifactsDir cannot be accessed.\n      throw new UsageError(\n        `Cannot access --artifacts-dir=\"${artifactsDir}\" because the user ` +\n        `lacks permissions: ${error}`);\n    } else if (isErrorWithCode('ENOENT', error)) {\n      // Create the artifact dir if it doesn't exist yet.\n      try {\n        log.debug(`Creating artifacts directory: ${artifactsDir}`);\n        await asyncMkdirp(artifactsDir);\n      } catch (mkdirErr) {\n        if (isErrorWithCode('EACCES', mkdirErr)) {\n          // Handle errors when the artifactsDir cannot be created for lack of permissions.\n          throw new UsageError(\n            `Cannot create --artifacts-dir=\"${artifactsDir}\" because the ` +\n            `user lacks permissions: ${mkdirErr}`);\n        } else {\n          throw mkdirErr;\n        }\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  return artifactsDir;\n}\n"],"mappings":"AACA,SAAQA,EAAR,QAAiB,IAAjB;AACA,OAAOC,kBAAP,MAA+B,QAA/B;AAEA,SAAQC,UAAR,EAAoBC,eAApB,QAA0C,cAA1C;AACA,SAAQC,YAAR,QAA2B,aAA3B;AAEA,MAAMC,GAAG,GAAGD,YAAY,CAACE,MAAM,CAACC,IAAP,CAAYC,GAAb,CAAxB;AAEA,MAAMC,oBAAsC,GAAGT,EAAE,CAACU,MAAH,CAAUC,IAAV,CAAeX,EAAf,CAA/C;AAOA,OAAO,eAAeY,mBAAf,CACLC,YADK,EAEL;EACEC,WAAW,GAAGb,kBADhB;EAEEc,aAAa,GAAGN;AAFlB,IAGgC,EAL3B,EAMY;EACjB,IAAI;IACF,MAAMO,KAAK,GAAG,MAAMhB,EAAE,CAACiB,IAAH,CAAQJ,YAAR,CAApB;;IACA,IAAI,CAACG,KAAK,CAACE,WAAN,EAAL,EAA0B;MACxB,MAAM,IAAIhB,UAAJ,CACH,oBAAmBW,YAAa,qCAD7B,CAAN;IAED,CALC,CAMF;;;IACA,IAAI;MACF,MAAME,aAAa,CAACF,YAAD,EAAeb,EAAE,CAACmB,IAAlB,CAAnB;IACD,CAFD,CAEE,OAAOC,SAAP,EAAkB;MAClB,IAAIjB,eAAe,CAAC,QAAD,EAAWiB,SAAX,CAAnB,EAA0C;QACxC,MAAM,IAAIlB,UAAJ,CACH,oBAAmBW,YAAa,8BAAjC,GACA,oBAFI,CAAN;MAGD,CAJD,MAIO;QACL,MAAMO,SAAN;MACD;IACF;EACF,CAlBD,CAkBE,OAAOC,KAAP,EAAc;IACd,IAAIlB,eAAe,CAAC,QAAD,EAAWkB,KAAX,CAAnB,EAAsC;MACpC;MACA,MAAM,IAAInB,UAAJ,CACH,kCAAiCW,YAAa,qBAA/C,GACC,sBAAqBQ,KAAM,EAFxB,CAAN;IAGD,CALD,MAKO,IAAIlB,eAAe,CAAC,QAAD,EAAWkB,KAAX,CAAnB,EAAsC;MAC3C;MACA,IAAI;QACFhB,GAAG,CAACiB,KAAJ,CAAW,iCAAgCT,YAAa,EAAxD;QACA,MAAMC,WAAW,CAACD,YAAD,CAAjB;MACD,CAHD,CAGE,OAAOU,QAAP,EAAiB;QACjB,IAAIpB,eAAe,CAAC,QAAD,EAAWoB,QAAX,CAAnB,EAAyC;UACvC;UACA,MAAM,IAAIrB,UAAJ,CACH,kCAAiCW,YAAa,gBAA/C,GACC,2BAA0BU,QAAS,EAFhC,CAAN;QAGD,CALD,MAKO;UACL,MAAMA,QAAN;QACD;MACF;IACF,CAfM,MAeA;MACL,MAAMF,KAAN;IACD;EACF;;EAED,OAAOR,YAAP;AACD"}