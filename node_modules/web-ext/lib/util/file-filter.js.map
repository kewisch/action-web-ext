{"version":3,"file":"file-filter.js","names":["path","multimatch","createLogger","log","import","meta","url","isSubPath","src","target","relate","relative","startsWith","sep","FileFilter","constructor","baseIgnoredPatterns","ignoreFiles","sourceDir","artifactsDir","resolve","filesToIgnore","addToIgnoreList","debug","join","resolveWithSourceDir","file","resolvedPath","files","charAt","resolvedFile","substr","push","wantFile","filePath","matches","length","createFileFilter","params"],"sources":["../../src/util/file-filter.js"],"sourcesContent":["/* @flow */\nimport path from 'path';\n\nimport multimatch from 'multimatch';\n\nimport {createLogger} from './logger.js';\n\nconst log = createLogger(import.meta.url);\n\n// check if target is a sub directory of src\nexport const isSubPath = (src: string, target: string): boolean => {\n  const relate = path.relative(src, target);\n  // same dir\n  if (!relate) {\n    return false;\n  }\n  if (relate === '..') {\n    return false;\n  }\n  return !relate.startsWith(`..${path.sep}`);\n};\n\n// FileFilter types and implementation.\n\nexport type FileFilterOptions = {\n  baseIgnoredPatterns?: Array<string>,\n  ignoreFiles?: Array<string>,\n  sourceDir: string,\n  artifactsDir?: string,\n};\n\n/*\n * Allows or ignores files.\n */\nexport class FileFilter {\n  filesToIgnore: Array<string>;\n  sourceDir: string;\n\n  constructor({\n    baseIgnoredPatterns = [\n      '**/*.xpi',\n      '**/*.zip',\n      '**/.*', // any hidden file and folder\n      '**/.*/**/*', // and the content inside hidden folder\n      '**/node_modules',\n      '**/node_modules/**/*',\n    ],\n    ignoreFiles = [],\n    sourceDir,\n    artifactsDir,\n  }: FileFilterOptions = {}) {\n    sourceDir = path.resolve(sourceDir);\n\n    this.filesToIgnore = [];\n    this.sourceDir = sourceDir;\n\n    this.addToIgnoreList(baseIgnoredPatterns);\n    if (ignoreFiles) {\n      this.addToIgnoreList(ignoreFiles);\n    }\n    if (artifactsDir && isSubPath(sourceDir, artifactsDir)) {\n      artifactsDir = path.resolve(artifactsDir);\n      log.debug(\n        `Ignoring artifacts directory \"${artifactsDir}\" ` +\n        'and all its subdirectories'\n      );\n      this.addToIgnoreList([\n        artifactsDir,\n        path.join(artifactsDir, '**', '*'),\n      ]);\n    }\n  }\n\n  /**\n   *  Resolve relative path to absolute path with sourceDir.\n   */\n  resolveWithSourceDir(file: string): string {\n    const resolvedPath = path.resolve(this.sourceDir, file);\n    log.debug(\n      `Resolved path ${file} with sourceDir ${this.sourceDir} ` +\n      `to ${resolvedPath}`\n    );\n    return resolvedPath;\n  }\n\n  /**\n   *  Insert more files into filesToIgnore array.\n   */\n  addToIgnoreList(files: Array<string>) {\n    for (const file of files) {\n      if (file.charAt(0) === '!') {\n        const resolvedFile = this.resolveWithSourceDir(file.substr(1));\n        this.filesToIgnore.push(`!${resolvedFile}`);\n      } else {\n        this.filesToIgnore.push(this.resolveWithSourceDir(file));\n      }\n    }\n  }\n\n  /*\n   * Returns true if the file is wanted.\n   *\n   * If filePath does not start with a slash, it will be treated as a path\n   * relative to sourceDir when matching it against all configured\n   * ignore-patterns.\n   *\n   * Example: this is called by zipdir as wantFile(filePath) for each\n   * file in the folder that is being archived.\n   */\n  wantFile(filePath: string): boolean {\n    const resolvedPath = this.resolveWithSourceDir(filePath);\n    const matches = multimatch(resolvedPath, this.filesToIgnore);\n    if (matches.length > 0) {\n      log.debug(`FileFilter: ignoring file ${resolvedPath}`);\n      return false;\n    }\n    return true;\n  }\n}\n\n// a helper function to make mocking easier\n\nexport const createFileFilter = (\n  (params: FileFilterOptions): FileFilter => new FileFilter(params)\n);\n\nexport type FileFilterCreatorFn = typeof createFileFilter;\n"],"mappings":"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"}