{"version":3,"file":"file-filter.js","names":["path","multimatch","createLogger","log","import","meta","url","isSubPath","src","target","relate","relative","startsWith","sep","FileFilter","filesToIgnore","sourceDir","constructor","baseIgnoredPatterns","ignoreFiles","artifactsDir","resolve","addToIgnoreList","debug","join","resolveWithSourceDir","file","resolvedPath","files","charAt","resolvedFile","substr","push","wantFile","filePath","matches","length","createFileFilter","params"],"sources":["../../src/util/file-filter.js"],"sourcesContent":["import path from 'path';\n\nimport multimatch from 'multimatch';\n\nimport { createLogger } from './logger.js';\n\nconst log = createLogger(import.meta.url);\n\n// check if target is a sub directory of src\nexport const isSubPath = (src, target) => {\n  const relate = path.relative(src, target);\n  // same dir\n  if (!relate) {\n    return false;\n  }\n  if (relate === '..') {\n    return false;\n  }\n  return !relate.startsWith(`..${path.sep}`);\n};\n\n// FileFilter types and implementation.\n\n/*\n * Allows or ignores files.\n */\nexport class FileFilter {\n  filesToIgnore;\n  sourceDir;\n\n  constructor({\n    baseIgnoredPatterns = [\n      '**/*.xpi',\n      '**/*.zip',\n      '**/.*', // any hidden file and folder\n      '**/.*/**/*', // and the content inside hidden folder\n      '**/node_modules',\n      '**/node_modules/**/*',\n    ],\n    ignoreFiles = [],\n    sourceDir,\n    artifactsDir,\n  } = {}) {\n    sourceDir = path.resolve(sourceDir);\n\n    this.filesToIgnore = [];\n    this.sourceDir = sourceDir;\n\n    this.addToIgnoreList(baseIgnoredPatterns);\n    if (ignoreFiles) {\n      this.addToIgnoreList(ignoreFiles);\n    }\n    if (artifactsDir && isSubPath(sourceDir, artifactsDir)) {\n      artifactsDir = path.resolve(artifactsDir);\n      log.debug(\n        `Ignoring artifacts directory \"${artifactsDir}\" ` +\n          'and all its subdirectories',\n      );\n      this.addToIgnoreList([artifactsDir, path.join(artifactsDir, '**', '*')]);\n    }\n  }\n\n  /**\n   *  Resolve relative path to absolute path with sourceDir.\n   */\n  resolveWithSourceDir(file) {\n    const resolvedPath = path.resolve(this.sourceDir, file);\n    log.debug(\n      `Resolved path ${file} with sourceDir ${this.sourceDir} ` +\n        `to ${resolvedPath}`,\n    );\n    return resolvedPath;\n  }\n\n  /**\n   *  Insert more files into filesToIgnore array.\n   */\n  addToIgnoreList(files) {\n    for (const file of files) {\n      if (file.charAt(0) === '!') {\n        const resolvedFile = this.resolveWithSourceDir(file.substr(1));\n        this.filesToIgnore.push(`!${resolvedFile}`);\n      } else {\n        this.filesToIgnore.push(this.resolveWithSourceDir(file));\n      }\n    }\n  }\n\n  /*\n   * Returns true if the file is wanted.\n   *\n   * If filePath does not start with a slash, it will be treated as a path\n   * relative to sourceDir when matching it against all configured\n   * ignore-patterns.\n   *\n   * Example: this is called by zipdir as wantFile(filePath) for each\n   * file in the folder that is being archived.\n   */\n  wantFile(filePath) {\n    const resolvedPath = this.resolveWithSourceDir(filePath);\n    const matches = multimatch(resolvedPath, this.filesToIgnore);\n    if (matches.length > 0) {\n      log.debug(`FileFilter: ignoring file ${resolvedPath}`);\n      return false;\n    }\n    return true;\n  }\n}\n\n// a helper function to make mocking easier\n\nexport const createFileFilter = (params) => new FileFilter(params);\n"],"mappings":"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","ignoreList":[]}