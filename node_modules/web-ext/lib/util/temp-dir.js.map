{"version":3,"file":"temp-dir.js","names":["promisify","tmp","createLogger","multiArgsPromisedFn","promisifyCustom","log","import","meta","url","dir","createTempDir","withTempDir","makePromise","tmpDir","TempDir","create","then","catch","errorHandler","successHandler","constructor","_path","undefined","_removeTempDir","prefix","unsafeCleanup","tmpPath","removeTempDir","Promise","resolve","reject","next","err","debug","path","Error","error","remove","promiseResult"],"sources":["../../src/util/temp-dir.js"],"sourcesContent":["/* @flow */\nimport {promisify} from 'util';\n\nimport tmp from 'tmp';\n\nimport {createLogger} from './logger.js';\nimport {multiArgsPromisedFn, promisifyCustom} from './promisify.js';\n\nconst log = createLogger(import.meta.url);\n\nexport type MakePromiseCallback = (tmpDir: TempDir) => any;\n\ntmp.dir[promisifyCustom] = multiArgsPromisedFn(tmp.dir);\n\nconst createTempDir = promisify(tmp.dir);\n\n/*\n * Work with a self-destructing temporary directory in a promise chain.\n *\n * The directory will be destroyed when the promise chain is finished\n * (whether there was an error or not).\n *\n * Usage:\n *\n * withTempDir(\n *   (tmpDir) =>\n *     doSomething(tmpDir.path())\n *     .then(...)\n * );\n *\n */\nexport function withTempDir(makePromise: MakePromiseCallback): Promise<any> {\n  const tmpDir = new TempDir();\n  return tmpDir.create()\n    .then(() => {\n      return makePromise(tmpDir);\n    })\n    .catch(tmpDir.errorHandler())\n    .then(tmpDir.successHandler());\n}\n\n/*\n * Work with a self-destructing temporary directory object.\n *\n * It is safer to use withTempDir() instead but if you know\n * what you're doing you can use it directly like:\n *\n * let tmpDir = new TempDir();\n * tmpDir.create()\n *   .then(() => {\n *     // work with tmpDir.path()\n *   })\n *   .catch(tmpDir.errorHandler())\n *   .then(tmpDir.successHandler());\n *\n */\nexport class TempDir {\n  _path: string | void;\n  _removeTempDir: Function | void;\n\n  constructor() {\n    this._path = undefined;\n    this._removeTempDir = undefined;\n  }\n\n  /*\n   * Returns a promise that is fulfilled when the temp directory has\n   * been created.\n   */\n  create(): Promise<TempDir> {\n    return createTempDir(\n      {\n        prefix: 'tmp-web-ext-',\n        // This allows us to remove a non-empty tmp dir.\n        unsafeCleanup: true,\n      })\n      .then(([tmpPath, removeTempDir]) => {\n        this._path = tmpPath;\n        this._removeTempDir = () => new Promise((resolve, reject) => {\n          // `removeTempDir` parameter is a `next` callback which\n          // is called once the dir has been removed.\n          const next = (err) => err ? reject(err) : resolve();\n          removeTempDir(next);\n        });\n        log.debug(`Created temporary directory: ${this.path()}`);\n        return this;\n      });\n  }\n\n  /*\n   * Get the absolute path of the temp directory.\n   */\n  path(): string {\n    if (!this._path) {\n      throw new Error('You cannot access path() before calling create()');\n    }\n    return this._path;\n  }\n\n  /*\n   * Returns a callback that will catch an error, remove\n   * the temporary directory, and throw the error.\n   *\n   * This is intended for use in a promise like\n   * Promise().catch(tmp.errorHandler())\n   */\n  errorHandler(): Function {\n    return async (error) => {\n      await this.remove();\n      throw error;\n    };\n  }\n\n  /*\n   * Returns a callback that will remove the temporary direcotry.\n   *\n   * This is intended for use in a promise like\n   * Promise().then(tmp.successHandler())\n   */\n  successHandler(): Function {\n    return async (promiseResult) => {\n      await this.remove();\n      return promiseResult;\n    };\n  }\n\n  /*\n   * Remove the temp directory.\n   */\n  remove(): Promise<void> | void {\n    if (!this._removeTempDir) {\n      return;\n    }\n    log.debug(`Removing temporary directory: ${this.path()}`);\n    return this._removeTempDir && this._removeTempDir();\n  }\n\n}\n"],"mappings":"AACA,SAAQA,SAAR,QAAwB,MAAxB;AAEA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,SAAQC,YAAR,QAA2B,aAA3B;AACA,SAAQC,mBAAR,EAA6BC,eAA7B,QAAmD,gBAAnD;AAEA,MAAMC,GAAG,GAAGH,YAAY,CAACI,MAAM,CAACC,IAAP,CAAYC,GAAb,CAAxB;AAIAP,GAAG,CAACQ,GAAJ,CAAQL,eAAR,IAA2BD,mBAAmB,CAACF,GAAG,CAACQ,GAAL,CAA9C;AAEA,MAAMC,aAAa,GAAGV,SAAS,CAACC,GAAG,CAACQ,GAAL,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,WAAT,CAAqBC,WAArB,EAAqE;EAC1E,MAAMC,MAAM,GAAG,IAAIC,OAAJ,EAAf;EACA,OAAOD,MAAM,CAACE,MAAP,GACJC,IADI,CACC,MAAM;IACV,OAAOJ,WAAW,CAACC,MAAD,CAAlB;EACD,CAHI,EAIJI,KAJI,CAIEJ,MAAM,CAACK,YAAP,EAJF,EAKJF,IALI,CAKCH,MAAM,CAACM,cAAP,EALD,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAML,OAAN,CAAc;EAInBM,WAAW,GAAG;IACZ,KAAKC,KAAL,GAAaC,SAAb;IACA,KAAKC,cAAL,GAAsBD,SAAtB;EACD;EAED;AACF;AACA;AACA;;;EACEP,MAAM,GAAqB;IACzB,OAAOL,aAAa,CAClB;MACEc,MAAM,EAAE,cADV;MAEE;MACAC,aAAa,EAAE;IAHjB,CADkB,CAAb,CAMJT,IANI,CAMC,CAAC,CAACU,OAAD,EAAUC,aAAV,CAAD,KAA8B;MAClC,KAAKN,KAAL,GAAaK,OAAb;;MACA,KAAKH,cAAL,GAAsB,MAAM,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;QAC3D;QACA;QACA,MAAMC,IAAI,GAAIC,GAAD,IAASA,GAAG,GAAGF,MAAM,CAACE,GAAD,CAAT,GAAiBH,OAAO,EAAjD;;QACAF,aAAa,CAACI,IAAD,CAAb;MACD,CAL2B,CAA5B;;MAMA1B,GAAG,CAAC4B,KAAJ,CAAW,gCAA+B,KAAKC,IAAL,EAAY,EAAtD;MACA,OAAO,IAAP;IACD,CAhBI,CAAP;EAiBD;EAED;AACF;AACA;;;EACEA,IAAI,GAAW;IACb,IAAI,CAAC,KAAKb,KAAV,EAAiB;MACf,MAAM,IAAIc,KAAJ,CAAU,kDAAV,CAAN;IACD;;IACD,OAAO,KAAKd,KAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEH,YAAY,GAAa;IACvB,OAAO,MAAOkB,KAAP,IAAiB;MACtB,MAAM,KAAKC,MAAL,EAAN;MACA,MAAMD,KAAN;IACD,CAHD;EAID;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEjB,cAAc,GAAa;IACzB,OAAO,MAAOmB,aAAP,IAAyB;MAC9B,MAAM,KAAKD,MAAL,EAAN;MACA,OAAOC,aAAP;IACD,CAHD;EAID;EAED;AACF;AACA;;;EACED,MAAM,GAAyB;IAC7B,IAAI,CAAC,KAAKd,cAAV,EAA0B;MACxB;IACD;;IACDlB,GAAG,CAAC4B,KAAJ,CAAW,iCAAgC,KAAKC,IAAL,EAAY,EAAvD;IACA,OAAO,KAAKX,cAAL,IAAuB,KAAKA,cAAL,EAA9B;EACD;;AA/EkB"}